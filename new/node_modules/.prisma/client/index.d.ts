
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Exercise
 * 
 */
export type Exercise = $Result.DefaultSelection<Prisma.$ExercisePayload>
/**
 * Model Workout
 * 
 */
export type Workout = $Result.DefaultSelection<Prisma.$WorkoutPayload>
/**
 * Model Progression
 * 
 */
export type Progression = $Result.DefaultSelection<Prisma.$ProgressionPayload>
/**
 * Model Acticity
 * 
 */
export type Acticity = $Result.DefaultSelection<Prisma.$ActicityPayload>
/**
 * Model Muscle
 * 
 */
export type Muscle = $Result.DefaultSelection<Prisma.$MusclePayload>
/**
 * Model Difficulty
 * 
 */
export type Difficulty = $Result.DefaultSelection<Prisma.$DifficultyPayload>
/**
 * Model Improve
 * 
 */
export type Improve = $Result.DefaultSelection<Prisma.$ImprovePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **Exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.ExerciseDelegate<ExtArgs>;

  /**
   * `prisma.workout`: Exposes CRUD operations for the **Workout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workouts
    * const workouts = await prisma.workout.findMany()
    * ```
    */
  get workout(): Prisma.WorkoutDelegate<ExtArgs>;

  /**
   * `prisma.progression`: Exposes CRUD operations for the **Progression** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Progressions
    * const progressions = await prisma.progression.findMany()
    * ```
    */
  get progression(): Prisma.ProgressionDelegate<ExtArgs>;

  /**
   * `prisma.acticity`: Exposes CRUD operations for the **Acticity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Acticities
    * const acticities = await prisma.acticity.findMany()
    * ```
    */
  get acticity(): Prisma.ActicityDelegate<ExtArgs>;

  /**
   * `prisma.muscle`: Exposes CRUD operations for the **Muscle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Muscles
    * const muscles = await prisma.muscle.findMany()
    * ```
    */
  get muscle(): Prisma.MuscleDelegate<ExtArgs>;

  /**
   * `prisma.difficulty`: Exposes CRUD operations for the **Difficulty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Difficulties
    * const difficulties = await prisma.difficulty.findMany()
    * ```
    */
  get difficulty(): Prisma.DifficultyDelegate<ExtArgs>;

  /**
   * `prisma.improve`: Exposes CRUD operations for the **Improve** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Improves
    * const improves = await prisma.improve.findMany()
    * ```
    */
  get improve(): Prisma.ImproveDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Exercise: 'Exercise',
    Workout: 'Workout',
    Progression: 'Progression',
    Acticity: 'Acticity',
    Muscle: 'Muscle',
    Difficulty: 'Difficulty',
    Improve: 'Improve'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'exercise' | 'workout' | 'progression' | 'acticity' | 'muscle' | 'difficulty' | 'improve'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Exercise: {
        payload: Prisma.$ExercisePayload<ExtArgs>
        fields: Prisma.ExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findFirst: {
            args: Prisma.ExerciseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findMany: {
            args: Prisma.ExerciseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          create: {
            args: Prisma.ExerciseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          createMany: {
            args: Prisma.ExerciseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExerciseCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          delete: {
            args: Prisma.ExerciseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          update: {
            args: Prisma.ExerciseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          deleteMany: {
            args: Prisma.ExerciseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExerciseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.ExerciseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseCountArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      Workout: {
        payload: Prisma.$WorkoutPayload<ExtArgs>
        fields: Prisma.WorkoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkoutFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkoutFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          findFirst: {
            args: Prisma.WorkoutFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkoutFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          findMany: {
            args: Prisma.WorkoutFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>[]
          }
          create: {
            args: Prisma.WorkoutCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          createMany: {
            args: Prisma.WorkoutCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkoutCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>[]
          }
          delete: {
            args: Prisma.WorkoutDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          update: {
            args: Prisma.WorkoutUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          deleteMany: {
            args: Prisma.WorkoutDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WorkoutUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WorkoutUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkoutPayload>
          }
          aggregate: {
            args: Prisma.WorkoutAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWorkout>
          }
          groupBy: {
            args: Prisma.WorkoutGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WorkoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkoutCountArgs<ExtArgs>,
            result: $Utils.Optional<WorkoutCountAggregateOutputType> | number
          }
        }
      }
      Progression: {
        payload: Prisma.$ProgressionPayload<ExtArgs>
        fields: Prisma.ProgressionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProgressionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProgressionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProgressionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProgressionPayload>
          }
          findFirst: {
            args: Prisma.ProgressionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProgressionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProgressionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProgressionPayload>
          }
          findMany: {
            args: Prisma.ProgressionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProgressionPayload>[]
          }
          create: {
            args: Prisma.ProgressionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProgressionPayload>
          }
          createMany: {
            args: Prisma.ProgressionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProgressionCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProgressionPayload>[]
          }
          delete: {
            args: Prisma.ProgressionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProgressionPayload>
          }
          update: {
            args: Prisma.ProgressionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProgressionPayload>
          }
          deleteMany: {
            args: Prisma.ProgressionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProgressionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProgressionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProgressionPayload>
          }
          aggregate: {
            args: Prisma.ProgressionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProgression>
          }
          groupBy: {
            args: Prisma.ProgressionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProgressionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProgressionCountArgs<ExtArgs>,
            result: $Utils.Optional<ProgressionCountAggregateOutputType> | number
          }
        }
      }
      Acticity: {
        payload: Prisma.$ActicityPayload<ExtArgs>
        fields: Prisma.ActicityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActicityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActicityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActicityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActicityPayload>
          }
          findFirst: {
            args: Prisma.ActicityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActicityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActicityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActicityPayload>
          }
          findMany: {
            args: Prisma.ActicityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActicityPayload>[]
          }
          create: {
            args: Prisma.ActicityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActicityPayload>
          }
          createMany: {
            args: Prisma.ActicityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActicityCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActicityPayload>[]
          }
          delete: {
            args: Prisma.ActicityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActicityPayload>
          }
          update: {
            args: Prisma.ActicityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActicityPayload>
          }
          deleteMany: {
            args: Prisma.ActicityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ActicityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ActicityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActicityPayload>
          }
          aggregate: {
            args: Prisma.ActicityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateActicity>
          }
          groupBy: {
            args: Prisma.ActicityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ActicityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActicityCountArgs<ExtArgs>,
            result: $Utils.Optional<ActicityCountAggregateOutputType> | number
          }
        }
      }
      Muscle: {
        payload: Prisma.$MusclePayload<ExtArgs>
        fields: Prisma.MuscleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MuscleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MuscleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>
          }
          findFirst: {
            args: Prisma.MuscleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MuscleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>
          }
          findMany: {
            args: Prisma.MuscleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>[]
          }
          create: {
            args: Prisma.MuscleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>
          }
          createMany: {
            args: Prisma.MuscleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MuscleCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>[]
          }
          delete: {
            args: Prisma.MuscleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>
          }
          update: {
            args: Prisma.MuscleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>
          }
          deleteMany: {
            args: Prisma.MuscleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MuscleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MuscleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusclePayload>
          }
          aggregate: {
            args: Prisma.MuscleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMuscle>
          }
          groupBy: {
            args: Prisma.MuscleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MuscleGroupByOutputType>[]
          }
          count: {
            args: Prisma.MuscleCountArgs<ExtArgs>,
            result: $Utils.Optional<MuscleCountAggregateOutputType> | number
          }
        }
      }
      Difficulty: {
        payload: Prisma.$DifficultyPayload<ExtArgs>
        fields: Prisma.DifficultyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DifficultyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DifficultyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>
          }
          findFirst: {
            args: Prisma.DifficultyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DifficultyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>
          }
          findMany: {
            args: Prisma.DifficultyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>[]
          }
          create: {
            args: Prisma.DifficultyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>
          }
          createMany: {
            args: Prisma.DifficultyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DifficultyCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>[]
          }
          delete: {
            args: Prisma.DifficultyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>
          }
          update: {
            args: Prisma.DifficultyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>
          }
          deleteMany: {
            args: Prisma.DifficultyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DifficultyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DifficultyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>
          }
          aggregate: {
            args: Prisma.DifficultyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDifficulty>
          }
          groupBy: {
            args: Prisma.DifficultyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DifficultyGroupByOutputType>[]
          }
          count: {
            args: Prisma.DifficultyCountArgs<ExtArgs>,
            result: $Utils.Optional<DifficultyCountAggregateOutputType> | number
          }
        }
      }
      Improve: {
        payload: Prisma.$ImprovePayload<ExtArgs>
        fields: Prisma.ImproveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImproveFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImprovePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImproveFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImprovePayload>
          }
          findFirst: {
            args: Prisma.ImproveFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImprovePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImproveFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImprovePayload>
          }
          findMany: {
            args: Prisma.ImproveFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImprovePayload>[]
          }
          create: {
            args: Prisma.ImproveCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImprovePayload>
          }
          createMany: {
            args: Prisma.ImproveCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImproveCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImprovePayload>[]
          }
          delete: {
            args: Prisma.ImproveDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImprovePayload>
          }
          update: {
            args: Prisma.ImproveUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImprovePayload>
          }
          deleteMany: {
            args: Prisma.ImproveDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ImproveUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ImproveUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImprovePayload>
          }
          aggregate: {
            args: Prisma.ImproveAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateImprove>
          }
          groupBy: {
            args: Prisma.ImproveGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ImproveGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImproveCountArgs<ExtArgs>,
            result: $Utils.Optional<ImproveCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    exercises: number
    workout: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | UserCountOutputTypeCountExercisesArgs
    workout?: boolean | UserCountOutputTypeCountWorkoutArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutWhereInput
  }


  /**
   * Count Type ExerciseCountOutputType
   */

  export type ExerciseCountOutputType = {
    muscles: number
    activities: number
  }

  export type ExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    muscles?: boolean | ExerciseCountOutputTypeCountMusclesArgs
    activities?: boolean | ExerciseCountOutputTypeCountActivitiesArgs
  }

  // Custom InputTypes
  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCountOutputType
     */
    select?: ExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountMusclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MuscleWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActicityWhereInput
  }


  /**
   * Count Type WorkoutCountOutputType
   */

  export type WorkoutCountOutputType = {
    muscles: number
    progressions: number
  }

  export type WorkoutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    muscles?: boolean | WorkoutCountOutputTypeCountMusclesArgs
    progressions?: boolean | WorkoutCountOutputTypeCountProgressionsArgs
  }

  // Custom InputTypes
  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutCountOutputType
     */
    select?: WorkoutCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountMusclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MuscleWhereInput
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountProgressionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgressionWhereInput
  }


  /**
   * Count Type ProgressionCountOutputType
   */

  export type ProgressionCountOutputType = {
    activities: number
  }

  export type ProgressionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | ProgressionCountOutputTypeCountActivitiesArgs
  }

  // Custom InputTypes
  /**
   * ProgressionCountOutputType without action
   */
  export type ProgressionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgressionCountOutputType
     */
    select?: ProgressionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProgressionCountOutputType without action
   */
  export type ProgressionCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActicityWhereInput
  }


  /**
   * Count Type MuscleCountOutputType
   */

  export type MuscleCountOutputType = {
    exercises: number
    workouts: number
  }

  export type MuscleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | MuscleCountOutputTypeCountExercisesArgs
    workouts?: boolean | MuscleCountOutputTypeCountWorkoutsArgs
  }

  // Custom InputTypes
  /**
   * MuscleCountOutputType without action
   */
  export type MuscleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleCountOutputType
     */
    select?: MuscleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MuscleCountOutputType without action
   */
  export type MuscleCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }

  /**
   * MuscleCountOutputType without action
   */
  export type MuscleCountOutputTypeCountWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutWhereInput
  }


  /**
   * Count Type DifficultyCountOutputType
   */

  export type DifficultyCountOutputType = {
    exercises: number
    workouts: number
  }

  export type DifficultyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | DifficultyCountOutputTypeCountExercisesArgs
    workouts?: boolean | DifficultyCountOutputTypeCountWorkoutsArgs
  }

  // Custom InputTypes
  /**
   * DifficultyCountOutputType without action
   */
  export type DifficultyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DifficultyCountOutputType
     */
    select?: DifficultyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DifficultyCountOutputType without action
   */
  export type DifficultyCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }

  /**
   * DifficultyCountOutputType without action
   */
  export type DifficultyCountOutputTypeCountWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutWhereInput
  }


  /**
   * Count Type ImproveCountOutputType
   */

  export type ImproveCountOutputType = {
    activities: number
  }

  export type ImproveCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | ImproveCountOutputTypeCountActivitiesArgs
  }

  // Custom InputTypes
  /**
   * ImproveCountOutputType without action
   */
  export type ImproveCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImproveCountOutputType
     */
    select?: ImproveCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ImproveCountOutputType without action
   */
  export type ImproveCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActicityWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    surname: string | null
    email: string | null
    passwordHash: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    surname: string | null
    email: string | null
    passwordHash: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    surname: number
    email: number
    passwordHash: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    email?: true
    passwordHash?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    email?: true
    passwordHash?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    email?: true
    passwordHash?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    surname: string
    email: string
    passwordHash: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    surname?: boolean
    email?: boolean
    passwordHash?: boolean
    exercises?: boolean | User$exercisesArgs<ExtArgs>
    workout?: boolean | User$workoutArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    surname?: boolean
    email?: boolean
    passwordHash?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    surname?: boolean
    email?: boolean
    passwordHash?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | User$exercisesArgs<ExtArgs>
    workout?: boolean | User$workoutArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
      workout: Prisma.$WorkoutPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      surname: string
      email: string
      passwordHash: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exercises<T extends User$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, User$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'> | Null>;

    workout<T extends User$workoutArgs<ExtArgs> = {}>(args?: Subset<T, User$workoutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly surname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.exercises
   */
  export type User$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * User.workout
   */
  export type User$workoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    where?: WorkoutWhereInput
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    cursor?: WorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    difficultyId: string | null
  }

  export type ExerciseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    difficultyId: string | null
  }

  export type ExerciseCountAggregateOutputType = {
    id: number
    name: number
    description: number
    userId: number
    difficultyId: number
    _all: number
  }


  export type ExerciseMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    difficultyId?: true
  }

  export type ExerciseMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    difficultyId?: true
  }

  export type ExerciseCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    difficultyId?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercise to aggregate.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type ExerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithAggregationInput | ExerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: ExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    id: string
    name: string
    description: string | null
    userId: string
    difficultyId: string
    _count: ExerciseCountAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends ExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    difficultyId?: boolean
    muscles?: boolean | Exercise$musclesArgs<ExtArgs>
    activities?: boolean | Exercise$activitiesArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    difficulty?: boolean | DifficultyDefaultArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    difficultyId?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    difficulty?: boolean | DifficultyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    difficultyId?: boolean
  }

  export type ExerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    muscles?: boolean | Exercise$musclesArgs<ExtArgs>
    activities?: boolean | Exercise$activitiesArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    difficulty?: boolean | DifficultyDefaultArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    difficulty?: boolean | DifficultyDefaultArgs<ExtArgs>
  }

  export type $ExercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exercise"
    objects: {
      muscles: Prisma.$MusclePayload<ExtArgs>[]
      activities: Prisma.$ActicityPayload<ExtArgs>[]
      User: Prisma.$UserPayload<ExtArgs>
      difficulty: Prisma.$DifficultyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      userId: string
      difficultyId: string
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }

  type ExerciseGetPayload<S extends boolean | null | undefined | ExerciseDefaultArgs> = $Result.GetResult<Prisma.$ExercisePayload, S>

  type ExerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExerciseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface ExerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercise'], meta: { name: 'Exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {ExerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExerciseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseFindUniqueArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exercise that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExerciseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExerciseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindFirstArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExerciseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExerciseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exercise.
     * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
    **/
    create<T extends ExerciseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseCreateArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exercises.
     * @param {ExerciseCreateManyArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ExerciseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercises and returns the data saved in the database.
     * @param {ExerciseCreateManyAndReturnArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ExerciseCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Exercise.
     * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
    **/
    delete<T extends ExerciseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseDeleteArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exercise.
     * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExerciseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpdateArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exercises.
     * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExerciseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExerciseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exercise.
     * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
    **/
    upsert<T extends ExerciseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpsertArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends ExerciseCountArgs>(
      args?: Subset<T, ExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercise model
   */
  readonly fields: ExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    muscles<T extends Exercise$musclesArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$musclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, 'findMany'> | Null>;

    activities<T extends Exercise$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'findMany'> | Null>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    difficulty<T extends DifficultyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DifficultyDefaultArgs<ExtArgs>>): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Exercise model
   */ 
  interface ExerciseFieldRefs {
    readonly id: FieldRef<"Exercise", 'String'>
    readonly name: FieldRef<"Exercise", 'String'>
    readonly description: FieldRef<"Exercise", 'String'>
    readonly userId: FieldRef<"Exercise", 'String'>
    readonly difficultyId: FieldRef<"Exercise", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Exercise findUnique
   */
  export type ExerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findUniqueOrThrow
   */
  export type ExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise findFirst
   */
  export type ExerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findFirstOrThrow
   */
  export type ExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise findMany
   */
  export type ExerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Exercise create
   */
  export type ExerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercise.
     */
    data: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
  }

  /**
   * Exercise createMany
   */
  export type ExerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercise createManyAndReturn
   */
  export type ExerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Exercise update
   */
  export type ExerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercise.
     */
    data: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
    /**
     * Choose, which Exercise to update.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise updateMany
   */
  export type ExerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
  }

  /**
   * Exercise upsert
   */
  export type ExerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercise to update in case it exists.
     */
    where: ExerciseWhereUniqueInput
    /**
     * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
     */
    create: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
    /**
     * In case the Exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
  }

  /**
   * Exercise delete
   */
  export type ExerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter which Exercise to delete.
     */
    where: ExerciseWhereUniqueInput
  }

  /**
   * Exercise deleteMany
   */
  export type ExerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to delete
     */
    where?: ExerciseWhereInput
  }

  /**
   * Exercise.muscles
   */
  export type Exercise$musclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    where?: MuscleWhereInput
    orderBy?: MuscleOrderByWithRelationInput | MuscleOrderByWithRelationInput[]
    cursor?: MuscleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MuscleScalarFieldEnum | MuscleScalarFieldEnum[]
  }

  /**
   * Exercise.activities
   */
  export type Exercise$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
    where?: ActicityWhereInput
    orderBy?: ActicityOrderByWithRelationInput | ActicityOrderByWithRelationInput[]
    cursor?: ActicityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActicityScalarFieldEnum | ActicityScalarFieldEnum[]
  }

  /**
   * Exercise without action
   */
  export type ExerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
  }


  /**
   * Model Workout
   */

  export type AggregateWorkout = {
    _count: WorkoutCountAggregateOutputType | null
    _min: WorkoutMinAggregateOutputType | null
    _max: WorkoutMaxAggregateOutputType | null
  }

  export type WorkoutMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    difficultyId: string | null
  }

  export type WorkoutMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    difficultyId: string | null
  }

  export type WorkoutCountAggregateOutputType = {
    id: number
    name: number
    description: number
    userId: number
    difficultyId: number
    _all: number
  }


  export type WorkoutMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    difficultyId?: true
  }

  export type WorkoutMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    difficultyId?: true
  }

  export type WorkoutCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    difficultyId?: true
    _all?: true
  }

  export type WorkoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workout to aggregate.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workouts
    **/
    _count?: true | WorkoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutMaxAggregateInputType
  }

  export type GetWorkoutAggregateType<T extends WorkoutAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkout[P]>
      : GetScalarType<T[P], AggregateWorkout[P]>
  }




  export type WorkoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkoutWhereInput
    orderBy?: WorkoutOrderByWithAggregationInput | WorkoutOrderByWithAggregationInput[]
    by: WorkoutScalarFieldEnum[] | WorkoutScalarFieldEnum
    having?: WorkoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutCountAggregateInputType | true
    _min?: WorkoutMinAggregateInputType
    _max?: WorkoutMaxAggregateInputType
  }

  export type WorkoutGroupByOutputType = {
    id: string
    name: string
    description: string | null
    userId: string
    difficultyId: string
    _count: WorkoutCountAggregateOutputType | null
    _min: WorkoutMinAggregateOutputType | null
    _max: WorkoutMaxAggregateOutputType | null
  }

  type GetWorkoutGroupByPayload<T extends WorkoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutGroupByOutputType[P]>
        }
      >
    >


  export type WorkoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    difficultyId?: boolean
    muscles?: boolean | Workout$musclesArgs<ExtArgs>
    progressions?: boolean | Workout$progressionsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    difficulty?: boolean | DifficultyDefaultArgs<ExtArgs>
    _count?: boolean | WorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout"]>

  export type WorkoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    difficultyId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    difficulty?: boolean | DifficultyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout"]>

  export type WorkoutSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    difficultyId?: boolean
  }

  export type WorkoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    muscles?: boolean | Workout$musclesArgs<ExtArgs>
    progressions?: boolean | Workout$progressionsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    difficulty?: boolean | DifficultyDefaultArgs<ExtArgs>
    _count?: boolean | WorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    difficulty?: boolean | DifficultyDefaultArgs<ExtArgs>
  }

  export type $WorkoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workout"
    objects: {
      muscles: Prisma.$MusclePayload<ExtArgs>[]
      progressions: Prisma.$ProgressionPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      difficulty: Prisma.$DifficultyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      userId: string
      difficultyId: string
    }, ExtArgs["result"]["workout"]>
    composites: {}
  }

  type WorkoutGetPayload<S extends boolean | null | undefined | WorkoutDefaultArgs> = $Result.GetResult<Prisma.$WorkoutPayload, S>

  type WorkoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkoutFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkoutCountAggregateInputType | true
    }

  export interface WorkoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workout'], meta: { name: 'Workout' } }
    /**
     * Find zero or one Workout that matches the filter.
     * @param {WorkoutFindUniqueArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkoutFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutFindUniqueArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Workout that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkoutFindUniqueOrThrowArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkoutFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Workout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindFirstArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkoutFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutFindFirstArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Workout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindFirstOrThrowArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkoutFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Workouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workouts
     * const workouts = await prisma.workout.findMany()
     * 
     * // Get first 10 Workouts
     * const workouts = await prisma.workout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutWithIdOnly = await prisma.workout.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkoutFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Workout.
     * @param {WorkoutCreateArgs} args - Arguments to create a Workout.
     * @example
     * // Create one Workout
     * const Workout = await prisma.workout.create({
     *   data: {
     *     // ... data to create a Workout
     *   }
     * })
     * 
    **/
    create<T extends WorkoutCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutCreateArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Workouts.
     * @param {WorkoutCreateManyArgs} args - Arguments to create many Workouts.
     * @example
     * // Create many Workouts
     * const workout = await prisma.workout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends WorkoutCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workouts and returns the data saved in the database.
     * @param {WorkoutCreateManyAndReturnArgs} args - Arguments to create many Workouts.
     * @example
     * // Create many Workouts
     * const workout = await prisma.workout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workouts and only return the `id`
     * const workoutWithIdOnly = await prisma.workout.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends WorkoutCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Workout.
     * @param {WorkoutDeleteArgs} args - Arguments to delete one Workout.
     * @example
     * // Delete one Workout
     * const Workout = await prisma.workout.delete({
     *   where: {
     *     // ... filter to delete one Workout
     *   }
     * })
     * 
    **/
    delete<T extends WorkoutDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutDeleteArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Workout.
     * @param {WorkoutUpdateArgs} args - Arguments to update one Workout.
     * @example
     * // Update one Workout
     * const workout = await prisma.workout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkoutUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutUpdateArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Workouts.
     * @param {WorkoutDeleteManyArgs} args - Arguments to filter Workouts to delete.
     * @example
     * // Delete a few Workouts
     * const { count } = await prisma.workout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkoutDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkoutDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workouts
     * const workout = await prisma.workout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkoutUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Workout.
     * @param {WorkoutUpsertArgs} args - Arguments to update or create a Workout.
     * @example
     * // Update or create a Workout
     * const workout = await prisma.workout.upsert({
     *   create: {
     *     // ... data to create a Workout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workout we want to update
     *   }
     * })
    **/
    upsert<T extends WorkoutUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WorkoutUpsertArgs<ExtArgs>>
    ): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutCountArgs} args - Arguments to filter Workouts to count.
     * @example
     * // Count the number of Workouts
     * const count = await prisma.workout.count({
     *   where: {
     *     // ... the filter for the Workouts we want to count
     *   }
     * })
    **/
    count<T extends WorkoutCountArgs>(
      args?: Subset<T, WorkoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutAggregateArgs>(args: Subset<T, WorkoutAggregateArgs>): Prisma.PrismaPromise<GetWorkoutAggregateType<T>>

    /**
     * Group by Workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkoutGroupByArgs['orderBy'] }
        : { orderBy?: WorkoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workout model
   */
  readonly fields: WorkoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    muscles<T extends Workout$musclesArgs<ExtArgs> = {}>(args?: Subset<T, Workout$musclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, 'findMany'> | Null>;

    progressions<T extends Workout$progressionsArgs<ExtArgs> = {}>(args?: Subset<T, Workout$progressionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgressionPayload<ExtArgs>, T, 'findMany'> | Null>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    difficulty<T extends DifficultyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DifficultyDefaultArgs<ExtArgs>>): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Workout model
   */ 
  interface WorkoutFieldRefs {
    readonly id: FieldRef<"Workout", 'String'>
    readonly name: FieldRef<"Workout", 'String'>
    readonly description: FieldRef<"Workout", 'String'>
    readonly userId: FieldRef<"Workout", 'String'>
    readonly difficultyId: FieldRef<"Workout", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Workout findUnique
   */
  export type WorkoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where: WorkoutWhereUniqueInput
  }

  /**
   * Workout findUniqueOrThrow
   */
  export type WorkoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where: WorkoutWhereUniqueInput
  }

  /**
   * Workout findFirst
   */
  export type WorkoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workouts.
     */
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * Workout findFirstOrThrow
   */
  export type WorkoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workout to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workouts.
     */
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * Workout findMany
   */
  export type WorkoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter, which Workouts to fetch.
     */
    where?: WorkoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workouts to fetch.
     */
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workouts.
     */
    cursor?: WorkoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workouts.
     */
    skip?: number
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * Workout create
   */
  export type WorkoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The data needed to create a Workout.
     */
    data: XOR<WorkoutCreateInput, WorkoutUncheckedCreateInput>
  }

  /**
   * Workout createMany
   */
  export type WorkoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workouts.
     */
    data: WorkoutCreateManyInput | WorkoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Workout createManyAndReturn
   */
  export type WorkoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Workouts.
     */
    data: WorkoutCreateManyInput | WorkoutCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workout update
   */
  export type WorkoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The data needed to update a Workout.
     */
    data: XOR<WorkoutUpdateInput, WorkoutUncheckedUpdateInput>
    /**
     * Choose, which Workout to update.
     */
    where: WorkoutWhereUniqueInput
  }

  /**
   * Workout updateMany
   */
  export type WorkoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workouts.
     */
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyInput>
    /**
     * Filter which Workouts to update
     */
    where?: WorkoutWhereInput
  }

  /**
   * Workout upsert
   */
  export type WorkoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * The filter to search for the Workout to update in case it exists.
     */
    where: WorkoutWhereUniqueInput
    /**
     * In case the Workout found by the `where` argument doesn't exist, create a new Workout with this data.
     */
    create: XOR<WorkoutCreateInput, WorkoutUncheckedCreateInput>
    /**
     * In case the Workout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkoutUpdateInput, WorkoutUncheckedUpdateInput>
  }

  /**
   * Workout delete
   */
  export type WorkoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    /**
     * Filter which Workout to delete.
     */
    where: WorkoutWhereUniqueInput
  }

  /**
   * Workout deleteMany
   */
  export type WorkoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workouts to delete
     */
    where?: WorkoutWhereInput
  }

  /**
   * Workout.muscles
   */
  export type Workout$musclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    where?: MuscleWhereInput
    orderBy?: MuscleOrderByWithRelationInput | MuscleOrderByWithRelationInput[]
    cursor?: MuscleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MuscleScalarFieldEnum | MuscleScalarFieldEnum[]
  }

  /**
   * Workout.progressions
   */
  export type Workout$progressionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progression
     */
    select?: ProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressionInclude<ExtArgs> | null
    where?: ProgressionWhereInput
    orderBy?: ProgressionOrderByWithRelationInput | ProgressionOrderByWithRelationInput[]
    cursor?: ProgressionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgressionScalarFieldEnum | ProgressionScalarFieldEnum[]
  }

  /**
   * Workout without action
   */
  export type WorkoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
  }


  /**
   * Model Progression
   */

  export type AggregateProgression = {
    _count: ProgressionCountAggregateOutputType | null
    _min: ProgressionMinAggregateOutputType | null
    _max: ProgressionMaxAggregateOutputType | null
  }

  export type ProgressionMinAggregateOutputType = {
    id: string | null
    workoutId: string | null
    createdAt: Date | null
  }

  export type ProgressionMaxAggregateOutputType = {
    id: string | null
    workoutId: string | null
    createdAt: Date | null
  }

  export type ProgressionCountAggregateOutputType = {
    id: number
    workoutId: number
    createdAt: number
    _all: number
  }


  export type ProgressionMinAggregateInputType = {
    id?: true
    workoutId?: true
    createdAt?: true
  }

  export type ProgressionMaxAggregateInputType = {
    id?: true
    workoutId?: true
    createdAt?: true
  }

  export type ProgressionCountAggregateInputType = {
    id?: true
    workoutId?: true
    createdAt?: true
    _all?: true
  }

  export type ProgressionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Progression to aggregate.
     */
    where?: ProgressionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Progressions to fetch.
     */
    orderBy?: ProgressionOrderByWithRelationInput | ProgressionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProgressionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Progressions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Progressions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Progressions
    **/
    _count?: true | ProgressionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProgressionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProgressionMaxAggregateInputType
  }

  export type GetProgressionAggregateType<T extends ProgressionAggregateArgs> = {
        [P in keyof T & keyof AggregateProgression]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProgression[P]>
      : GetScalarType<T[P], AggregateProgression[P]>
  }




  export type ProgressionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgressionWhereInput
    orderBy?: ProgressionOrderByWithAggregationInput | ProgressionOrderByWithAggregationInput[]
    by: ProgressionScalarFieldEnum[] | ProgressionScalarFieldEnum
    having?: ProgressionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProgressionCountAggregateInputType | true
    _min?: ProgressionMinAggregateInputType
    _max?: ProgressionMaxAggregateInputType
  }

  export type ProgressionGroupByOutputType = {
    id: string
    workoutId: string
    createdAt: Date
    _count: ProgressionCountAggregateOutputType | null
    _min: ProgressionMinAggregateOutputType | null
    _max: ProgressionMaxAggregateOutputType | null
  }

  type GetProgressionGroupByPayload<T extends ProgressionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProgressionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProgressionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProgressionGroupByOutputType[P]>
            : GetScalarType<T[P], ProgressionGroupByOutputType[P]>
        }
      >
    >


  export type ProgressionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutId?: boolean
    createdAt?: boolean
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
    activities?: boolean | Progression$activitiesArgs<ExtArgs>
    _count?: boolean | ProgressionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["progression"]>

  export type ProgressionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workoutId?: boolean
    createdAt?: boolean
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["progression"]>

  export type ProgressionSelectScalar = {
    id?: boolean
    workoutId?: boolean
    createdAt?: boolean
  }

  export type ProgressionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
    activities?: boolean | Progression$activitiesArgs<ExtArgs>
    _count?: boolean | ProgressionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProgressionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | WorkoutDefaultArgs<ExtArgs>
  }

  export type $ProgressionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Progression"
    objects: {
      workout: Prisma.$WorkoutPayload<ExtArgs>
      activities: Prisma.$ActicityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workoutId: string
      createdAt: Date
    }, ExtArgs["result"]["progression"]>
    composites: {}
  }

  type ProgressionGetPayload<S extends boolean | null | undefined | ProgressionDefaultArgs> = $Result.GetResult<Prisma.$ProgressionPayload, S>

  type ProgressionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProgressionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProgressionCountAggregateInputType | true
    }

  export interface ProgressionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Progression'], meta: { name: 'Progression' } }
    /**
     * Find zero or one Progression that matches the filter.
     * @param {ProgressionFindUniqueArgs} args - Arguments to find a Progression
     * @example
     * // Get one Progression
     * const progression = await prisma.progression.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProgressionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProgressionFindUniqueArgs<ExtArgs>>
    ): Prisma__ProgressionClient<$Result.GetResult<Prisma.$ProgressionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Progression that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProgressionFindUniqueOrThrowArgs} args - Arguments to find a Progression
     * @example
     * // Get one Progression
     * const progression = await prisma.progression.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProgressionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProgressionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProgressionClient<$Result.GetResult<Prisma.$ProgressionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Progression that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressionFindFirstArgs} args - Arguments to find a Progression
     * @example
     * // Get one Progression
     * const progression = await prisma.progression.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProgressionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProgressionFindFirstArgs<ExtArgs>>
    ): Prisma__ProgressionClient<$Result.GetResult<Prisma.$ProgressionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Progression that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressionFindFirstOrThrowArgs} args - Arguments to find a Progression
     * @example
     * // Get one Progression
     * const progression = await prisma.progression.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProgressionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProgressionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProgressionClient<$Result.GetResult<Prisma.$ProgressionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Progressions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Progressions
     * const progressions = await prisma.progression.findMany()
     * 
     * // Get first 10 Progressions
     * const progressions = await prisma.progression.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const progressionWithIdOnly = await prisma.progression.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProgressionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProgressionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgressionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Progression.
     * @param {ProgressionCreateArgs} args - Arguments to create a Progression.
     * @example
     * // Create one Progression
     * const Progression = await prisma.progression.create({
     *   data: {
     *     // ... data to create a Progression
     *   }
     * })
     * 
    **/
    create<T extends ProgressionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProgressionCreateArgs<ExtArgs>>
    ): Prisma__ProgressionClient<$Result.GetResult<Prisma.$ProgressionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Progressions.
     * @param {ProgressionCreateManyArgs} args - Arguments to create many Progressions.
     * @example
     * // Create many Progressions
     * const progression = await prisma.progression.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ProgressionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProgressionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Progressions and returns the data saved in the database.
     * @param {ProgressionCreateManyAndReturnArgs} args - Arguments to create many Progressions.
     * @example
     * // Create many Progressions
     * const progression = await prisma.progression.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Progressions and only return the `id`
     * const progressionWithIdOnly = await prisma.progression.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ProgressionCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ProgressionCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgressionPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Progression.
     * @param {ProgressionDeleteArgs} args - Arguments to delete one Progression.
     * @example
     * // Delete one Progression
     * const Progression = await prisma.progression.delete({
     *   where: {
     *     // ... filter to delete one Progression
     *   }
     * })
     * 
    **/
    delete<T extends ProgressionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProgressionDeleteArgs<ExtArgs>>
    ): Prisma__ProgressionClient<$Result.GetResult<Prisma.$ProgressionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Progression.
     * @param {ProgressionUpdateArgs} args - Arguments to update one Progression.
     * @example
     * // Update one Progression
     * const progression = await prisma.progression.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProgressionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProgressionUpdateArgs<ExtArgs>>
    ): Prisma__ProgressionClient<$Result.GetResult<Prisma.$ProgressionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Progressions.
     * @param {ProgressionDeleteManyArgs} args - Arguments to filter Progressions to delete.
     * @example
     * // Delete a few Progressions
     * const { count } = await prisma.progression.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProgressionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProgressionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Progressions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Progressions
     * const progression = await prisma.progression.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProgressionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProgressionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Progression.
     * @param {ProgressionUpsertArgs} args - Arguments to update or create a Progression.
     * @example
     * // Update or create a Progression
     * const progression = await prisma.progression.upsert({
     *   create: {
     *     // ... data to create a Progression
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Progression we want to update
     *   }
     * })
    **/
    upsert<T extends ProgressionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProgressionUpsertArgs<ExtArgs>>
    ): Prisma__ProgressionClient<$Result.GetResult<Prisma.$ProgressionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Progressions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressionCountArgs} args - Arguments to filter Progressions to count.
     * @example
     * // Count the number of Progressions
     * const count = await prisma.progression.count({
     *   where: {
     *     // ... the filter for the Progressions we want to count
     *   }
     * })
    **/
    count<T extends ProgressionCountArgs>(
      args?: Subset<T, ProgressionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProgressionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Progression.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProgressionAggregateArgs>(args: Subset<T, ProgressionAggregateArgs>): Prisma.PrismaPromise<GetProgressionAggregateType<T>>

    /**
     * Group by Progression.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProgressionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProgressionGroupByArgs['orderBy'] }
        : { orderBy?: ProgressionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProgressionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgressionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Progression model
   */
  readonly fields: ProgressionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Progression.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProgressionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    workout<T extends WorkoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkoutDefaultArgs<ExtArgs>>): Prisma__WorkoutClient<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    activities<T extends Progression$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, Progression$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Progression model
   */ 
  interface ProgressionFieldRefs {
    readonly id: FieldRef<"Progression", 'String'>
    readonly workoutId: FieldRef<"Progression", 'String'>
    readonly createdAt: FieldRef<"Progression", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Progression findUnique
   */
  export type ProgressionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progression
     */
    select?: ProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressionInclude<ExtArgs> | null
    /**
     * Filter, which Progression to fetch.
     */
    where: ProgressionWhereUniqueInput
  }

  /**
   * Progression findUniqueOrThrow
   */
  export type ProgressionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progression
     */
    select?: ProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressionInclude<ExtArgs> | null
    /**
     * Filter, which Progression to fetch.
     */
    where: ProgressionWhereUniqueInput
  }

  /**
   * Progression findFirst
   */
  export type ProgressionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progression
     */
    select?: ProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressionInclude<ExtArgs> | null
    /**
     * Filter, which Progression to fetch.
     */
    where?: ProgressionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Progressions to fetch.
     */
    orderBy?: ProgressionOrderByWithRelationInput | ProgressionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Progressions.
     */
    cursor?: ProgressionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Progressions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Progressions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Progressions.
     */
    distinct?: ProgressionScalarFieldEnum | ProgressionScalarFieldEnum[]
  }

  /**
   * Progression findFirstOrThrow
   */
  export type ProgressionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progression
     */
    select?: ProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressionInclude<ExtArgs> | null
    /**
     * Filter, which Progression to fetch.
     */
    where?: ProgressionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Progressions to fetch.
     */
    orderBy?: ProgressionOrderByWithRelationInput | ProgressionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Progressions.
     */
    cursor?: ProgressionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Progressions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Progressions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Progressions.
     */
    distinct?: ProgressionScalarFieldEnum | ProgressionScalarFieldEnum[]
  }

  /**
   * Progression findMany
   */
  export type ProgressionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progression
     */
    select?: ProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressionInclude<ExtArgs> | null
    /**
     * Filter, which Progressions to fetch.
     */
    where?: ProgressionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Progressions to fetch.
     */
    orderBy?: ProgressionOrderByWithRelationInput | ProgressionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Progressions.
     */
    cursor?: ProgressionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Progressions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Progressions.
     */
    skip?: number
    distinct?: ProgressionScalarFieldEnum | ProgressionScalarFieldEnum[]
  }

  /**
   * Progression create
   */
  export type ProgressionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progression
     */
    select?: ProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressionInclude<ExtArgs> | null
    /**
     * The data needed to create a Progression.
     */
    data: XOR<ProgressionCreateInput, ProgressionUncheckedCreateInput>
  }

  /**
   * Progression createMany
   */
  export type ProgressionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Progressions.
     */
    data: ProgressionCreateManyInput | ProgressionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Progression createManyAndReturn
   */
  export type ProgressionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progression
     */
    select?: ProgressionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Progressions.
     */
    data: ProgressionCreateManyInput | ProgressionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Progression update
   */
  export type ProgressionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progression
     */
    select?: ProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressionInclude<ExtArgs> | null
    /**
     * The data needed to update a Progression.
     */
    data: XOR<ProgressionUpdateInput, ProgressionUncheckedUpdateInput>
    /**
     * Choose, which Progression to update.
     */
    where: ProgressionWhereUniqueInput
  }

  /**
   * Progression updateMany
   */
  export type ProgressionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Progressions.
     */
    data: XOR<ProgressionUpdateManyMutationInput, ProgressionUncheckedUpdateManyInput>
    /**
     * Filter which Progressions to update
     */
    where?: ProgressionWhereInput
  }

  /**
   * Progression upsert
   */
  export type ProgressionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progression
     */
    select?: ProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressionInclude<ExtArgs> | null
    /**
     * The filter to search for the Progression to update in case it exists.
     */
    where: ProgressionWhereUniqueInput
    /**
     * In case the Progression found by the `where` argument doesn't exist, create a new Progression with this data.
     */
    create: XOR<ProgressionCreateInput, ProgressionUncheckedCreateInput>
    /**
     * In case the Progression was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProgressionUpdateInput, ProgressionUncheckedUpdateInput>
  }

  /**
   * Progression delete
   */
  export type ProgressionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progression
     */
    select?: ProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressionInclude<ExtArgs> | null
    /**
     * Filter which Progression to delete.
     */
    where: ProgressionWhereUniqueInput
  }

  /**
   * Progression deleteMany
   */
  export type ProgressionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Progressions to delete
     */
    where?: ProgressionWhereInput
  }

  /**
   * Progression.activities
   */
  export type Progression$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
    where?: ActicityWhereInput
    orderBy?: ActicityOrderByWithRelationInput | ActicityOrderByWithRelationInput[]
    cursor?: ActicityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActicityScalarFieldEnum | ActicityScalarFieldEnum[]
  }

  /**
   * Progression without action
   */
  export type ProgressionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progression
     */
    select?: ProgressionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressionInclude<ExtArgs> | null
  }


  /**
   * Model Acticity
   */

  export type AggregateActicity = {
    _count: ActicityCountAggregateOutputType | null
    _avg: ActicityAvgAggregateOutputType | null
    _sum: ActicitySumAggregateOutputType | null
    _min: ActicityMinAggregateOutputType | null
    _max: ActicityMaxAggregateOutputType | null
  }

  export type ActicityAvgAggregateOutputType = {
    order: number | null
    sets: number | null
    reps: number | null
  }

  export type ActicitySumAggregateOutputType = {
    order: number | null
    sets: number | null
    reps: number | null
  }

  export type ActicityMinAggregateOutputType = {
    id: string | null
    order: number | null
    sets: number | null
    reps: number | null
    progressionId: string | null
    exerciseId: string | null
    improveId: string | null
  }

  export type ActicityMaxAggregateOutputType = {
    id: string | null
    order: number | null
    sets: number | null
    reps: number | null
    progressionId: string | null
    exerciseId: string | null
    improveId: string | null
  }

  export type ActicityCountAggregateOutputType = {
    id: number
    order: number
    sets: number
    reps: number
    progressionId: number
    exerciseId: number
    improveId: number
    _all: number
  }


  export type ActicityAvgAggregateInputType = {
    order?: true
    sets?: true
    reps?: true
  }

  export type ActicitySumAggregateInputType = {
    order?: true
    sets?: true
    reps?: true
  }

  export type ActicityMinAggregateInputType = {
    id?: true
    order?: true
    sets?: true
    reps?: true
    progressionId?: true
    exerciseId?: true
    improveId?: true
  }

  export type ActicityMaxAggregateInputType = {
    id?: true
    order?: true
    sets?: true
    reps?: true
    progressionId?: true
    exerciseId?: true
    improveId?: true
  }

  export type ActicityCountAggregateInputType = {
    id?: true
    order?: true
    sets?: true
    reps?: true
    progressionId?: true
    exerciseId?: true
    improveId?: true
    _all?: true
  }

  export type ActicityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Acticity to aggregate.
     */
    where?: ActicityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Acticities to fetch.
     */
    orderBy?: ActicityOrderByWithRelationInput | ActicityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActicityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Acticities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Acticities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Acticities
    **/
    _count?: true | ActicityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActicityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActicitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActicityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActicityMaxAggregateInputType
  }

  export type GetActicityAggregateType<T extends ActicityAggregateArgs> = {
        [P in keyof T & keyof AggregateActicity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActicity[P]>
      : GetScalarType<T[P], AggregateActicity[P]>
  }




  export type ActicityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActicityWhereInput
    orderBy?: ActicityOrderByWithAggregationInput | ActicityOrderByWithAggregationInput[]
    by: ActicityScalarFieldEnum[] | ActicityScalarFieldEnum
    having?: ActicityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActicityCountAggregateInputType | true
    _avg?: ActicityAvgAggregateInputType
    _sum?: ActicitySumAggregateInputType
    _min?: ActicityMinAggregateInputType
    _max?: ActicityMaxAggregateInputType
  }

  export type ActicityGroupByOutputType = {
    id: string
    order: number
    sets: number
    reps: number
    progressionId: string
    exerciseId: string
    improveId: string | null
    _count: ActicityCountAggregateOutputType | null
    _avg: ActicityAvgAggregateOutputType | null
    _sum: ActicitySumAggregateOutputType | null
    _min: ActicityMinAggregateOutputType | null
    _max: ActicityMaxAggregateOutputType | null
  }

  type GetActicityGroupByPayload<T extends ActicityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActicityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActicityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActicityGroupByOutputType[P]>
            : GetScalarType<T[P], ActicityGroupByOutputType[P]>
        }
      >
    >


  export type ActicitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    sets?: boolean
    reps?: boolean
    progressionId?: boolean
    exerciseId?: boolean
    improveId?: boolean
    progression?: boolean | ProgressionDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    improve?: boolean | Acticity$improveArgs<ExtArgs>
  }, ExtArgs["result"]["acticity"]>

  export type ActicitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    sets?: boolean
    reps?: boolean
    progressionId?: boolean
    exerciseId?: boolean
    improveId?: boolean
    progression?: boolean | ProgressionDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    improve?: boolean | Acticity$improveArgs<ExtArgs>
  }, ExtArgs["result"]["acticity"]>

  export type ActicitySelectScalar = {
    id?: boolean
    order?: boolean
    sets?: boolean
    reps?: boolean
    progressionId?: boolean
    exerciseId?: boolean
    improveId?: boolean
  }

  export type ActicityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    progression?: boolean | ProgressionDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    improve?: boolean | Acticity$improveArgs<ExtArgs>
  }
  export type ActicityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    progression?: boolean | ProgressionDefaultArgs<ExtArgs>
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    improve?: boolean | Acticity$improveArgs<ExtArgs>
  }

  export type $ActicityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Acticity"
    objects: {
      progression: Prisma.$ProgressionPayload<ExtArgs>
      exercise: Prisma.$ExercisePayload<ExtArgs>
      improve: Prisma.$ImprovePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      order: number
      sets: number
      reps: number
      progressionId: string
      exerciseId: string
      improveId: string | null
    }, ExtArgs["result"]["acticity"]>
    composites: {}
  }

  type ActicityGetPayload<S extends boolean | null | undefined | ActicityDefaultArgs> = $Result.GetResult<Prisma.$ActicityPayload, S>

  type ActicityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActicityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActicityCountAggregateInputType | true
    }

  export interface ActicityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Acticity'], meta: { name: 'Acticity' } }
    /**
     * Find zero or one Acticity that matches the filter.
     * @param {ActicityFindUniqueArgs} args - Arguments to find a Acticity
     * @example
     * // Get one Acticity
     * const acticity = await prisma.acticity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActicityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ActicityFindUniqueArgs<ExtArgs>>
    ): Prisma__ActicityClient<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Acticity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActicityFindUniqueOrThrowArgs} args - Arguments to find a Acticity
     * @example
     * // Get one Acticity
     * const acticity = await prisma.acticity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActicityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActicityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ActicityClient<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Acticity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActicityFindFirstArgs} args - Arguments to find a Acticity
     * @example
     * // Get one Acticity
     * const acticity = await prisma.acticity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActicityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ActicityFindFirstArgs<ExtArgs>>
    ): Prisma__ActicityClient<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Acticity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActicityFindFirstOrThrowArgs} args - Arguments to find a Acticity
     * @example
     * // Get one Acticity
     * const acticity = await prisma.acticity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActicityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActicityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ActicityClient<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Acticities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActicityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Acticities
     * const acticities = await prisma.acticity.findMany()
     * 
     * // Get first 10 Acticities
     * const acticities = await prisma.acticity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const acticityWithIdOnly = await prisma.acticity.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ActicityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActicityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Acticity.
     * @param {ActicityCreateArgs} args - Arguments to create a Acticity.
     * @example
     * // Create one Acticity
     * const Acticity = await prisma.acticity.create({
     *   data: {
     *     // ... data to create a Acticity
     *   }
     * })
     * 
    **/
    create<T extends ActicityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ActicityCreateArgs<ExtArgs>>
    ): Prisma__ActicityClient<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Acticities.
     * @param {ActicityCreateManyArgs} args - Arguments to create many Acticities.
     * @example
     * // Create many Acticities
     * const acticity = await prisma.acticity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ActicityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActicityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Acticities and returns the data saved in the database.
     * @param {ActicityCreateManyAndReturnArgs} args - Arguments to create many Acticities.
     * @example
     * // Create many Acticities
     * const acticity = await prisma.acticity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Acticities and only return the `id`
     * const acticityWithIdOnly = await prisma.acticity.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ActicityCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ActicityCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Acticity.
     * @param {ActicityDeleteArgs} args - Arguments to delete one Acticity.
     * @example
     * // Delete one Acticity
     * const Acticity = await prisma.acticity.delete({
     *   where: {
     *     // ... filter to delete one Acticity
     *   }
     * })
     * 
    **/
    delete<T extends ActicityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ActicityDeleteArgs<ExtArgs>>
    ): Prisma__ActicityClient<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Acticity.
     * @param {ActicityUpdateArgs} args - Arguments to update one Acticity.
     * @example
     * // Update one Acticity
     * const acticity = await prisma.acticity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActicityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ActicityUpdateArgs<ExtArgs>>
    ): Prisma__ActicityClient<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Acticities.
     * @param {ActicityDeleteManyArgs} args - Arguments to filter Acticities to delete.
     * @example
     * // Delete a few Acticities
     * const { count } = await prisma.acticity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActicityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActicityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Acticities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActicityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Acticities
     * const acticity = await prisma.acticity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActicityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ActicityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Acticity.
     * @param {ActicityUpsertArgs} args - Arguments to update or create a Acticity.
     * @example
     * // Update or create a Acticity
     * const acticity = await prisma.acticity.upsert({
     *   create: {
     *     // ... data to create a Acticity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Acticity we want to update
     *   }
     * })
    **/
    upsert<T extends ActicityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ActicityUpsertArgs<ExtArgs>>
    ): Prisma__ActicityClient<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Acticities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActicityCountArgs} args - Arguments to filter Acticities to count.
     * @example
     * // Count the number of Acticities
     * const count = await prisma.acticity.count({
     *   where: {
     *     // ... the filter for the Acticities we want to count
     *   }
     * })
    **/
    count<T extends ActicityCountArgs>(
      args?: Subset<T, ActicityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActicityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Acticity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActicityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActicityAggregateArgs>(args: Subset<T, ActicityAggregateArgs>): Prisma.PrismaPromise<GetActicityAggregateType<T>>

    /**
     * Group by Acticity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActicityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActicityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActicityGroupByArgs['orderBy'] }
        : { orderBy?: ActicityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActicityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActicityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Acticity model
   */
  readonly fields: ActicityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Acticity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActicityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    progression<T extends ProgressionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProgressionDefaultArgs<ExtArgs>>): Prisma__ProgressionClient<$Result.GetResult<Prisma.$ProgressionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    improve<T extends Acticity$improveArgs<ExtArgs> = {}>(args?: Subset<T, Acticity$improveArgs<ExtArgs>>): Prisma__ImproveClient<$Result.GetResult<Prisma.$ImprovePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Acticity model
   */ 
  interface ActicityFieldRefs {
    readonly id: FieldRef<"Acticity", 'String'>
    readonly order: FieldRef<"Acticity", 'Int'>
    readonly sets: FieldRef<"Acticity", 'Int'>
    readonly reps: FieldRef<"Acticity", 'Int'>
    readonly progressionId: FieldRef<"Acticity", 'String'>
    readonly exerciseId: FieldRef<"Acticity", 'String'>
    readonly improveId: FieldRef<"Acticity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Acticity findUnique
   */
  export type ActicityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
    /**
     * Filter, which Acticity to fetch.
     */
    where: ActicityWhereUniqueInput
  }

  /**
   * Acticity findUniqueOrThrow
   */
  export type ActicityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
    /**
     * Filter, which Acticity to fetch.
     */
    where: ActicityWhereUniqueInput
  }

  /**
   * Acticity findFirst
   */
  export type ActicityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
    /**
     * Filter, which Acticity to fetch.
     */
    where?: ActicityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Acticities to fetch.
     */
    orderBy?: ActicityOrderByWithRelationInput | ActicityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Acticities.
     */
    cursor?: ActicityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Acticities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Acticities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Acticities.
     */
    distinct?: ActicityScalarFieldEnum | ActicityScalarFieldEnum[]
  }

  /**
   * Acticity findFirstOrThrow
   */
  export type ActicityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
    /**
     * Filter, which Acticity to fetch.
     */
    where?: ActicityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Acticities to fetch.
     */
    orderBy?: ActicityOrderByWithRelationInput | ActicityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Acticities.
     */
    cursor?: ActicityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Acticities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Acticities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Acticities.
     */
    distinct?: ActicityScalarFieldEnum | ActicityScalarFieldEnum[]
  }

  /**
   * Acticity findMany
   */
  export type ActicityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
    /**
     * Filter, which Acticities to fetch.
     */
    where?: ActicityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Acticities to fetch.
     */
    orderBy?: ActicityOrderByWithRelationInput | ActicityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Acticities.
     */
    cursor?: ActicityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Acticities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Acticities.
     */
    skip?: number
    distinct?: ActicityScalarFieldEnum | ActicityScalarFieldEnum[]
  }

  /**
   * Acticity create
   */
  export type ActicityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
    /**
     * The data needed to create a Acticity.
     */
    data: XOR<ActicityCreateInput, ActicityUncheckedCreateInput>
  }

  /**
   * Acticity createMany
   */
  export type ActicityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Acticities.
     */
    data: ActicityCreateManyInput | ActicityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Acticity createManyAndReturn
   */
  export type ActicityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Acticities.
     */
    data: ActicityCreateManyInput | ActicityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Acticity update
   */
  export type ActicityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
    /**
     * The data needed to update a Acticity.
     */
    data: XOR<ActicityUpdateInput, ActicityUncheckedUpdateInput>
    /**
     * Choose, which Acticity to update.
     */
    where: ActicityWhereUniqueInput
  }

  /**
   * Acticity updateMany
   */
  export type ActicityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Acticities.
     */
    data: XOR<ActicityUpdateManyMutationInput, ActicityUncheckedUpdateManyInput>
    /**
     * Filter which Acticities to update
     */
    where?: ActicityWhereInput
  }

  /**
   * Acticity upsert
   */
  export type ActicityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
    /**
     * The filter to search for the Acticity to update in case it exists.
     */
    where: ActicityWhereUniqueInput
    /**
     * In case the Acticity found by the `where` argument doesn't exist, create a new Acticity with this data.
     */
    create: XOR<ActicityCreateInput, ActicityUncheckedCreateInput>
    /**
     * In case the Acticity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActicityUpdateInput, ActicityUncheckedUpdateInput>
  }

  /**
   * Acticity delete
   */
  export type ActicityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
    /**
     * Filter which Acticity to delete.
     */
    where: ActicityWhereUniqueInput
  }

  /**
   * Acticity deleteMany
   */
  export type ActicityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Acticities to delete
     */
    where?: ActicityWhereInput
  }

  /**
   * Acticity.improve
   */
  export type Acticity$improveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Improve
     */
    select?: ImproveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImproveInclude<ExtArgs> | null
    where?: ImproveWhereInput
  }

  /**
   * Acticity without action
   */
  export type ActicityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
  }


  /**
   * Model Muscle
   */

  export type AggregateMuscle = {
    _count: MuscleCountAggregateOutputType | null
    _min: MuscleMinAggregateOutputType | null
    _max: MuscleMaxAggregateOutputType | null
  }

  export type MuscleMinAggregateOutputType = {
    id: string | null
    name: string | null
    value: string | null
  }

  export type MuscleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    value: string | null
  }

  export type MuscleCountAggregateOutputType = {
    id: number
    name: number
    value: number
    _all: number
  }


  export type MuscleMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
  }

  export type MuscleMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
  }

  export type MuscleCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    _all?: true
  }

  export type MuscleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Muscle to aggregate.
     */
    where?: MuscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Muscles to fetch.
     */
    orderBy?: MuscleOrderByWithRelationInput | MuscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MuscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Muscles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Muscles
    **/
    _count?: true | MuscleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MuscleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MuscleMaxAggregateInputType
  }

  export type GetMuscleAggregateType<T extends MuscleAggregateArgs> = {
        [P in keyof T & keyof AggregateMuscle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMuscle[P]>
      : GetScalarType<T[P], AggregateMuscle[P]>
  }




  export type MuscleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MuscleWhereInput
    orderBy?: MuscleOrderByWithAggregationInput | MuscleOrderByWithAggregationInput[]
    by: MuscleScalarFieldEnum[] | MuscleScalarFieldEnum
    having?: MuscleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MuscleCountAggregateInputType | true
    _min?: MuscleMinAggregateInputType
    _max?: MuscleMaxAggregateInputType
  }

  export type MuscleGroupByOutputType = {
    id: string
    name: string
    value: string
    _count: MuscleCountAggregateOutputType | null
    _min: MuscleMinAggregateOutputType | null
    _max: MuscleMaxAggregateOutputType | null
  }

  type GetMuscleGroupByPayload<T extends MuscleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MuscleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MuscleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MuscleGroupByOutputType[P]>
            : GetScalarType<T[P], MuscleGroupByOutputType[P]>
        }
      >
    >


  export type MuscleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    value?: boolean
    exercises?: boolean | Muscle$exercisesArgs<ExtArgs>
    workouts?: boolean | Muscle$workoutsArgs<ExtArgs>
    _count?: boolean | MuscleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["muscle"]>

  export type MuscleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    value?: boolean
  }, ExtArgs["result"]["muscle"]>

  export type MuscleSelectScalar = {
    id?: boolean
    name?: boolean
    value?: boolean
  }

  export type MuscleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | Muscle$exercisesArgs<ExtArgs>
    workouts?: boolean | Muscle$workoutsArgs<ExtArgs>
    _count?: boolean | MuscleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MuscleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MusclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Muscle"
    objects: {
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
      workouts: Prisma.$WorkoutPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      value: string
    }, ExtArgs["result"]["muscle"]>
    composites: {}
  }

  type MuscleGetPayload<S extends boolean | null | undefined | MuscleDefaultArgs> = $Result.GetResult<Prisma.$MusclePayload, S>

  type MuscleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MuscleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MuscleCountAggregateInputType | true
    }

  export interface MuscleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Muscle'], meta: { name: 'Muscle' } }
    /**
     * Find zero or one Muscle that matches the filter.
     * @param {MuscleFindUniqueArgs} args - Arguments to find a Muscle
     * @example
     * // Get one Muscle
     * const muscle = await prisma.muscle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MuscleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MuscleFindUniqueArgs<ExtArgs>>
    ): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Muscle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MuscleFindUniqueOrThrowArgs} args - Arguments to find a Muscle
     * @example
     * // Get one Muscle
     * const muscle = await prisma.muscle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MuscleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MuscleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Muscle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleFindFirstArgs} args - Arguments to find a Muscle
     * @example
     * // Get one Muscle
     * const muscle = await prisma.muscle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MuscleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MuscleFindFirstArgs<ExtArgs>>
    ): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Muscle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleFindFirstOrThrowArgs} args - Arguments to find a Muscle
     * @example
     * // Get one Muscle
     * const muscle = await prisma.muscle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MuscleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MuscleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Muscles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Muscles
     * const muscles = await prisma.muscle.findMany()
     * 
     * // Get first 10 Muscles
     * const muscles = await prisma.muscle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const muscleWithIdOnly = await prisma.muscle.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MuscleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MuscleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Muscle.
     * @param {MuscleCreateArgs} args - Arguments to create a Muscle.
     * @example
     * // Create one Muscle
     * const Muscle = await prisma.muscle.create({
     *   data: {
     *     // ... data to create a Muscle
     *   }
     * })
     * 
    **/
    create<T extends MuscleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MuscleCreateArgs<ExtArgs>>
    ): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Muscles.
     * @param {MuscleCreateManyArgs} args - Arguments to create many Muscles.
     * @example
     * // Create many Muscles
     * const muscle = await prisma.muscle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends MuscleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MuscleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Muscles and returns the data saved in the database.
     * @param {MuscleCreateManyAndReturnArgs} args - Arguments to create many Muscles.
     * @example
     * // Create many Muscles
     * const muscle = await prisma.muscle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Muscles and only return the `id`
     * const muscleWithIdOnly = await prisma.muscle.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends MuscleCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, MuscleCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Muscle.
     * @param {MuscleDeleteArgs} args - Arguments to delete one Muscle.
     * @example
     * // Delete one Muscle
     * const Muscle = await prisma.muscle.delete({
     *   where: {
     *     // ... filter to delete one Muscle
     *   }
     * })
     * 
    **/
    delete<T extends MuscleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MuscleDeleteArgs<ExtArgs>>
    ): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Muscle.
     * @param {MuscleUpdateArgs} args - Arguments to update one Muscle.
     * @example
     * // Update one Muscle
     * const muscle = await prisma.muscle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MuscleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MuscleUpdateArgs<ExtArgs>>
    ): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Muscles.
     * @param {MuscleDeleteManyArgs} args - Arguments to filter Muscles to delete.
     * @example
     * // Delete a few Muscles
     * const { count } = await prisma.muscle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MuscleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MuscleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Muscles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Muscles
     * const muscle = await prisma.muscle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MuscleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MuscleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Muscle.
     * @param {MuscleUpsertArgs} args - Arguments to update or create a Muscle.
     * @example
     * // Update or create a Muscle
     * const muscle = await prisma.muscle.upsert({
     *   create: {
     *     // ... data to create a Muscle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Muscle we want to update
     *   }
     * })
    **/
    upsert<T extends MuscleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MuscleUpsertArgs<ExtArgs>>
    ): Prisma__MuscleClient<$Result.GetResult<Prisma.$MusclePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Muscles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleCountArgs} args - Arguments to filter Muscles to count.
     * @example
     * // Count the number of Muscles
     * const count = await prisma.muscle.count({
     *   where: {
     *     // ... the filter for the Muscles we want to count
     *   }
     * })
    **/
    count<T extends MuscleCountArgs>(
      args?: Subset<T, MuscleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MuscleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Muscle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MuscleAggregateArgs>(args: Subset<T, MuscleAggregateArgs>): Prisma.PrismaPromise<GetMuscleAggregateType<T>>

    /**
     * Group by Muscle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MuscleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MuscleGroupByArgs['orderBy'] }
        : { orderBy?: MuscleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MuscleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMuscleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Muscle model
   */
  readonly fields: MuscleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Muscle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MuscleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exercises<T extends Muscle$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, Muscle$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'> | Null>;

    workouts<T extends Muscle$workoutsArgs<ExtArgs> = {}>(args?: Subset<T, Muscle$workoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Muscle model
   */ 
  interface MuscleFieldRefs {
    readonly id: FieldRef<"Muscle", 'String'>
    readonly name: FieldRef<"Muscle", 'String'>
    readonly value: FieldRef<"Muscle", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Muscle findUnique
   */
  export type MuscleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * Filter, which Muscle to fetch.
     */
    where: MuscleWhereUniqueInput
  }

  /**
   * Muscle findUniqueOrThrow
   */
  export type MuscleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * Filter, which Muscle to fetch.
     */
    where: MuscleWhereUniqueInput
  }

  /**
   * Muscle findFirst
   */
  export type MuscleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * Filter, which Muscle to fetch.
     */
    where?: MuscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Muscles to fetch.
     */
    orderBy?: MuscleOrderByWithRelationInput | MuscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Muscles.
     */
    cursor?: MuscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Muscles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Muscles.
     */
    distinct?: MuscleScalarFieldEnum | MuscleScalarFieldEnum[]
  }

  /**
   * Muscle findFirstOrThrow
   */
  export type MuscleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * Filter, which Muscle to fetch.
     */
    where?: MuscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Muscles to fetch.
     */
    orderBy?: MuscleOrderByWithRelationInput | MuscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Muscles.
     */
    cursor?: MuscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Muscles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Muscles.
     */
    distinct?: MuscleScalarFieldEnum | MuscleScalarFieldEnum[]
  }

  /**
   * Muscle findMany
   */
  export type MuscleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * Filter, which Muscles to fetch.
     */
    where?: MuscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Muscles to fetch.
     */
    orderBy?: MuscleOrderByWithRelationInput | MuscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Muscles.
     */
    cursor?: MuscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Muscles.
     */
    skip?: number
    distinct?: MuscleScalarFieldEnum | MuscleScalarFieldEnum[]
  }

  /**
   * Muscle create
   */
  export type MuscleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * The data needed to create a Muscle.
     */
    data: XOR<MuscleCreateInput, MuscleUncheckedCreateInput>
  }

  /**
   * Muscle createMany
   */
  export type MuscleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Muscles.
     */
    data: MuscleCreateManyInput | MuscleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Muscle createManyAndReturn
   */
  export type MuscleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Muscles.
     */
    data: MuscleCreateManyInput | MuscleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Muscle update
   */
  export type MuscleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * The data needed to update a Muscle.
     */
    data: XOR<MuscleUpdateInput, MuscleUncheckedUpdateInput>
    /**
     * Choose, which Muscle to update.
     */
    where: MuscleWhereUniqueInput
  }

  /**
   * Muscle updateMany
   */
  export type MuscleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Muscles.
     */
    data: XOR<MuscleUpdateManyMutationInput, MuscleUncheckedUpdateManyInput>
    /**
     * Filter which Muscles to update
     */
    where?: MuscleWhereInput
  }

  /**
   * Muscle upsert
   */
  export type MuscleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * The filter to search for the Muscle to update in case it exists.
     */
    where: MuscleWhereUniqueInput
    /**
     * In case the Muscle found by the `where` argument doesn't exist, create a new Muscle with this data.
     */
    create: XOR<MuscleCreateInput, MuscleUncheckedCreateInput>
    /**
     * In case the Muscle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MuscleUpdateInput, MuscleUncheckedUpdateInput>
  }

  /**
   * Muscle delete
   */
  export type MuscleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
    /**
     * Filter which Muscle to delete.
     */
    where: MuscleWhereUniqueInput
  }

  /**
   * Muscle deleteMany
   */
  export type MuscleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Muscles to delete
     */
    where?: MuscleWhereInput
  }

  /**
   * Muscle.exercises
   */
  export type Muscle$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Muscle.workouts
   */
  export type Muscle$workoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    where?: WorkoutWhereInput
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    cursor?: WorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * Muscle without action
   */
  export type MuscleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Muscle
     */
    select?: MuscleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MuscleInclude<ExtArgs> | null
  }


  /**
   * Model Difficulty
   */

  export type AggregateDifficulty = {
    _count: DifficultyCountAggregateOutputType | null
    _avg: DifficultyAvgAggregateOutputType | null
    _sum: DifficultySumAggregateOutputType | null
    _min: DifficultyMinAggregateOutputType | null
    _max: DifficultyMaxAggregateOutputType | null
  }

  export type DifficultyAvgAggregateOutputType = {
    level: number | null
  }

  export type DifficultySumAggregateOutputType = {
    level: number | null
  }

  export type DifficultyMinAggregateOutputType = {
    id: string | null
    name: string | null
    value: string | null
    level: number | null
  }

  export type DifficultyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    value: string | null
    level: number | null
  }

  export type DifficultyCountAggregateOutputType = {
    id: number
    name: number
    value: number
    level: number
    _all: number
  }


  export type DifficultyAvgAggregateInputType = {
    level?: true
  }

  export type DifficultySumAggregateInputType = {
    level?: true
  }

  export type DifficultyMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
    level?: true
  }

  export type DifficultyMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
    level?: true
  }

  export type DifficultyCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    level?: true
    _all?: true
  }

  export type DifficultyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Difficulty to aggregate.
     */
    where?: DifficultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Difficulties to fetch.
     */
    orderBy?: DifficultyOrderByWithRelationInput | DifficultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DifficultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Difficulties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Difficulties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Difficulties
    **/
    _count?: true | DifficultyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DifficultyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DifficultySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DifficultyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DifficultyMaxAggregateInputType
  }

  export type GetDifficultyAggregateType<T extends DifficultyAggregateArgs> = {
        [P in keyof T & keyof AggregateDifficulty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDifficulty[P]>
      : GetScalarType<T[P], AggregateDifficulty[P]>
  }




  export type DifficultyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DifficultyWhereInput
    orderBy?: DifficultyOrderByWithAggregationInput | DifficultyOrderByWithAggregationInput[]
    by: DifficultyScalarFieldEnum[] | DifficultyScalarFieldEnum
    having?: DifficultyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DifficultyCountAggregateInputType | true
    _avg?: DifficultyAvgAggregateInputType
    _sum?: DifficultySumAggregateInputType
    _min?: DifficultyMinAggregateInputType
    _max?: DifficultyMaxAggregateInputType
  }

  export type DifficultyGroupByOutputType = {
    id: string
    name: string
    value: string
    level: number
    _count: DifficultyCountAggregateOutputType | null
    _avg: DifficultyAvgAggregateOutputType | null
    _sum: DifficultySumAggregateOutputType | null
    _min: DifficultyMinAggregateOutputType | null
    _max: DifficultyMaxAggregateOutputType | null
  }

  type GetDifficultyGroupByPayload<T extends DifficultyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DifficultyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DifficultyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DifficultyGroupByOutputType[P]>
            : GetScalarType<T[P], DifficultyGroupByOutputType[P]>
        }
      >
    >


  export type DifficultySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    value?: boolean
    level?: boolean
    exercises?: boolean | Difficulty$exercisesArgs<ExtArgs>
    workouts?: boolean | Difficulty$workoutsArgs<ExtArgs>
    _count?: boolean | DifficultyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["difficulty"]>

  export type DifficultySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    value?: boolean
    level?: boolean
  }, ExtArgs["result"]["difficulty"]>

  export type DifficultySelectScalar = {
    id?: boolean
    name?: boolean
    value?: boolean
    level?: boolean
  }

  export type DifficultyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | Difficulty$exercisesArgs<ExtArgs>
    workouts?: boolean | Difficulty$workoutsArgs<ExtArgs>
    _count?: boolean | DifficultyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DifficultyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DifficultyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Difficulty"
    objects: {
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
      workouts: Prisma.$WorkoutPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      value: string
      level: number
    }, ExtArgs["result"]["difficulty"]>
    composites: {}
  }

  type DifficultyGetPayload<S extends boolean | null | undefined | DifficultyDefaultArgs> = $Result.GetResult<Prisma.$DifficultyPayload, S>

  type DifficultyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DifficultyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DifficultyCountAggregateInputType | true
    }

  export interface DifficultyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Difficulty'], meta: { name: 'Difficulty' } }
    /**
     * Find zero or one Difficulty that matches the filter.
     * @param {DifficultyFindUniqueArgs} args - Arguments to find a Difficulty
     * @example
     * // Get one Difficulty
     * const difficulty = await prisma.difficulty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DifficultyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DifficultyFindUniqueArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Difficulty that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DifficultyFindUniqueOrThrowArgs} args - Arguments to find a Difficulty
     * @example
     * // Get one Difficulty
     * const difficulty = await prisma.difficulty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DifficultyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Difficulty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyFindFirstArgs} args - Arguments to find a Difficulty
     * @example
     * // Get one Difficulty
     * const difficulty = await prisma.difficulty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DifficultyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyFindFirstArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Difficulty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyFindFirstOrThrowArgs} args - Arguments to find a Difficulty
     * @example
     * // Get one Difficulty
     * const difficulty = await prisma.difficulty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DifficultyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Difficulties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Difficulties
     * const difficulties = await prisma.difficulty.findMany()
     * 
     * // Get first 10 Difficulties
     * const difficulties = await prisma.difficulty.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const difficultyWithIdOnly = await prisma.difficulty.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DifficultyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Difficulty.
     * @param {DifficultyCreateArgs} args - Arguments to create a Difficulty.
     * @example
     * // Create one Difficulty
     * const Difficulty = await prisma.difficulty.create({
     *   data: {
     *     // ... data to create a Difficulty
     *   }
     * })
     * 
    **/
    create<T extends DifficultyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DifficultyCreateArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Difficulties.
     * @param {DifficultyCreateManyArgs} args - Arguments to create many Difficulties.
     * @example
     * // Create many Difficulties
     * const difficulty = await prisma.difficulty.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends DifficultyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Difficulties and returns the data saved in the database.
     * @param {DifficultyCreateManyAndReturnArgs} args - Arguments to create many Difficulties.
     * @example
     * // Create many Difficulties
     * const difficulty = await prisma.difficulty.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Difficulties and only return the `id`
     * const difficultyWithIdOnly = await prisma.difficulty.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends DifficultyCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Difficulty.
     * @param {DifficultyDeleteArgs} args - Arguments to delete one Difficulty.
     * @example
     * // Delete one Difficulty
     * const Difficulty = await prisma.difficulty.delete({
     *   where: {
     *     // ... filter to delete one Difficulty
     *   }
     * })
     * 
    **/
    delete<T extends DifficultyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DifficultyDeleteArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Difficulty.
     * @param {DifficultyUpdateArgs} args - Arguments to update one Difficulty.
     * @example
     * // Update one Difficulty
     * const difficulty = await prisma.difficulty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DifficultyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DifficultyUpdateArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Difficulties.
     * @param {DifficultyDeleteManyArgs} args - Arguments to filter Difficulties to delete.
     * @example
     * // Delete a few Difficulties
     * const { count } = await prisma.difficulty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DifficultyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Difficulties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Difficulties
     * const difficulty = await prisma.difficulty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DifficultyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DifficultyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Difficulty.
     * @param {DifficultyUpsertArgs} args - Arguments to update or create a Difficulty.
     * @example
     * // Update or create a Difficulty
     * const difficulty = await prisma.difficulty.upsert({
     *   create: {
     *     // ... data to create a Difficulty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Difficulty we want to update
     *   }
     * })
    **/
    upsert<T extends DifficultyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DifficultyUpsertArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Difficulties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyCountArgs} args - Arguments to filter Difficulties to count.
     * @example
     * // Count the number of Difficulties
     * const count = await prisma.difficulty.count({
     *   where: {
     *     // ... the filter for the Difficulties we want to count
     *   }
     * })
    **/
    count<T extends DifficultyCountArgs>(
      args?: Subset<T, DifficultyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DifficultyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Difficulty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DifficultyAggregateArgs>(args: Subset<T, DifficultyAggregateArgs>): Prisma.PrismaPromise<GetDifficultyAggregateType<T>>

    /**
     * Group by Difficulty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DifficultyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DifficultyGroupByArgs['orderBy'] }
        : { orderBy?: DifficultyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DifficultyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDifficultyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Difficulty model
   */
  readonly fields: DifficultyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Difficulty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DifficultyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exercises<T extends Difficulty$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, Difficulty$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'> | Null>;

    workouts<T extends Difficulty$workoutsArgs<ExtArgs> = {}>(args?: Subset<T, Difficulty$workoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkoutPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Difficulty model
   */ 
  interface DifficultyFieldRefs {
    readonly id: FieldRef<"Difficulty", 'String'>
    readonly name: FieldRef<"Difficulty", 'String'>
    readonly value: FieldRef<"Difficulty", 'String'>
    readonly level: FieldRef<"Difficulty", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Difficulty findUnique
   */
  export type DifficultyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * Filter, which Difficulty to fetch.
     */
    where: DifficultyWhereUniqueInput
  }

  /**
   * Difficulty findUniqueOrThrow
   */
  export type DifficultyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * Filter, which Difficulty to fetch.
     */
    where: DifficultyWhereUniqueInput
  }

  /**
   * Difficulty findFirst
   */
  export type DifficultyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * Filter, which Difficulty to fetch.
     */
    where?: DifficultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Difficulties to fetch.
     */
    orderBy?: DifficultyOrderByWithRelationInput | DifficultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Difficulties.
     */
    cursor?: DifficultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Difficulties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Difficulties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Difficulties.
     */
    distinct?: DifficultyScalarFieldEnum | DifficultyScalarFieldEnum[]
  }

  /**
   * Difficulty findFirstOrThrow
   */
  export type DifficultyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * Filter, which Difficulty to fetch.
     */
    where?: DifficultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Difficulties to fetch.
     */
    orderBy?: DifficultyOrderByWithRelationInput | DifficultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Difficulties.
     */
    cursor?: DifficultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Difficulties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Difficulties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Difficulties.
     */
    distinct?: DifficultyScalarFieldEnum | DifficultyScalarFieldEnum[]
  }

  /**
   * Difficulty findMany
   */
  export type DifficultyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * Filter, which Difficulties to fetch.
     */
    where?: DifficultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Difficulties to fetch.
     */
    orderBy?: DifficultyOrderByWithRelationInput | DifficultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Difficulties.
     */
    cursor?: DifficultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Difficulties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Difficulties.
     */
    skip?: number
    distinct?: DifficultyScalarFieldEnum | DifficultyScalarFieldEnum[]
  }

  /**
   * Difficulty create
   */
  export type DifficultyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * The data needed to create a Difficulty.
     */
    data: XOR<DifficultyCreateInput, DifficultyUncheckedCreateInput>
  }

  /**
   * Difficulty createMany
   */
  export type DifficultyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Difficulties.
     */
    data: DifficultyCreateManyInput | DifficultyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Difficulty createManyAndReturn
   */
  export type DifficultyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Difficulties.
     */
    data: DifficultyCreateManyInput | DifficultyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Difficulty update
   */
  export type DifficultyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * The data needed to update a Difficulty.
     */
    data: XOR<DifficultyUpdateInput, DifficultyUncheckedUpdateInput>
    /**
     * Choose, which Difficulty to update.
     */
    where: DifficultyWhereUniqueInput
  }

  /**
   * Difficulty updateMany
   */
  export type DifficultyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Difficulties.
     */
    data: XOR<DifficultyUpdateManyMutationInput, DifficultyUncheckedUpdateManyInput>
    /**
     * Filter which Difficulties to update
     */
    where?: DifficultyWhereInput
  }

  /**
   * Difficulty upsert
   */
  export type DifficultyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * The filter to search for the Difficulty to update in case it exists.
     */
    where: DifficultyWhereUniqueInput
    /**
     * In case the Difficulty found by the `where` argument doesn't exist, create a new Difficulty with this data.
     */
    create: XOR<DifficultyCreateInput, DifficultyUncheckedCreateInput>
    /**
     * In case the Difficulty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DifficultyUpdateInput, DifficultyUncheckedUpdateInput>
  }

  /**
   * Difficulty delete
   */
  export type DifficultyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * Filter which Difficulty to delete.
     */
    where: DifficultyWhereUniqueInput
  }

  /**
   * Difficulty deleteMany
   */
  export type DifficultyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Difficulties to delete
     */
    where?: DifficultyWhereInput
  }

  /**
   * Difficulty.exercises
   */
  export type Difficulty$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * Difficulty.workouts
   */
  export type Difficulty$workoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout
     */
    select?: WorkoutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkoutInclude<ExtArgs> | null
    where?: WorkoutWhereInput
    orderBy?: WorkoutOrderByWithRelationInput | WorkoutOrderByWithRelationInput[]
    cursor?: WorkoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * Difficulty without action
   */
  export type DifficultyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
  }


  /**
   * Model Improve
   */

  export type AggregateImprove = {
    _count: ImproveCountAggregateOutputType | null
    _min: ImproveMinAggregateOutputType | null
    _max: ImproveMaxAggregateOutputType | null
  }

  export type ImproveMinAggregateOutputType = {
    id: string | null
    name: string | null
    value: string | null
  }

  export type ImproveMaxAggregateOutputType = {
    id: string | null
    name: string | null
    value: string | null
  }

  export type ImproveCountAggregateOutputType = {
    id: number
    name: number
    value: number
    _all: number
  }


  export type ImproveMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
  }

  export type ImproveMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
  }

  export type ImproveCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    _all?: true
  }

  export type ImproveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Improve to aggregate.
     */
    where?: ImproveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Improves to fetch.
     */
    orderBy?: ImproveOrderByWithRelationInput | ImproveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImproveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Improves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Improves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Improves
    **/
    _count?: true | ImproveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImproveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImproveMaxAggregateInputType
  }

  export type GetImproveAggregateType<T extends ImproveAggregateArgs> = {
        [P in keyof T & keyof AggregateImprove]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImprove[P]>
      : GetScalarType<T[P], AggregateImprove[P]>
  }




  export type ImproveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImproveWhereInput
    orderBy?: ImproveOrderByWithAggregationInput | ImproveOrderByWithAggregationInput[]
    by: ImproveScalarFieldEnum[] | ImproveScalarFieldEnum
    having?: ImproveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImproveCountAggregateInputType | true
    _min?: ImproveMinAggregateInputType
    _max?: ImproveMaxAggregateInputType
  }

  export type ImproveGroupByOutputType = {
    id: string
    name: string
    value: string
    _count: ImproveCountAggregateOutputType | null
    _min: ImproveMinAggregateOutputType | null
    _max: ImproveMaxAggregateOutputType | null
  }

  type GetImproveGroupByPayload<T extends ImproveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImproveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImproveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImproveGroupByOutputType[P]>
            : GetScalarType<T[P], ImproveGroupByOutputType[P]>
        }
      >
    >


  export type ImproveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    value?: boolean
    activities?: boolean | Improve$activitiesArgs<ExtArgs>
    _count?: boolean | ImproveCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["improve"]>

  export type ImproveSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    value?: boolean
  }, ExtArgs["result"]["improve"]>

  export type ImproveSelectScalar = {
    id?: boolean
    name?: boolean
    value?: boolean
  }

  export type ImproveInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | Improve$activitiesArgs<ExtArgs>
    _count?: boolean | ImproveCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ImproveIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ImprovePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Improve"
    objects: {
      activities: Prisma.$ActicityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      value: string
    }, ExtArgs["result"]["improve"]>
    composites: {}
  }

  type ImproveGetPayload<S extends boolean | null | undefined | ImproveDefaultArgs> = $Result.GetResult<Prisma.$ImprovePayload, S>

  type ImproveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ImproveFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ImproveCountAggregateInputType | true
    }

  export interface ImproveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Improve'], meta: { name: 'Improve' } }
    /**
     * Find zero or one Improve that matches the filter.
     * @param {ImproveFindUniqueArgs} args - Arguments to find a Improve
     * @example
     * // Get one Improve
     * const improve = await prisma.improve.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImproveFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ImproveFindUniqueArgs<ExtArgs>>
    ): Prisma__ImproveClient<$Result.GetResult<Prisma.$ImprovePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Improve that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ImproveFindUniqueOrThrowArgs} args - Arguments to find a Improve
     * @example
     * // Get one Improve
     * const improve = await prisma.improve.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ImproveFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImproveFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ImproveClient<$Result.GetResult<Prisma.$ImprovePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Improve that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImproveFindFirstArgs} args - Arguments to find a Improve
     * @example
     * // Get one Improve
     * const improve = await prisma.improve.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImproveFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ImproveFindFirstArgs<ExtArgs>>
    ): Prisma__ImproveClient<$Result.GetResult<Prisma.$ImprovePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Improve that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImproveFindFirstOrThrowArgs} args - Arguments to find a Improve
     * @example
     * // Get one Improve
     * const improve = await prisma.improve.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ImproveFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImproveFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ImproveClient<$Result.GetResult<Prisma.$ImprovePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Improves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImproveFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Improves
     * const improves = await prisma.improve.findMany()
     * 
     * // Get first 10 Improves
     * const improves = await prisma.improve.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const improveWithIdOnly = await prisma.improve.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImproveFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImproveFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImprovePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Improve.
     * @param {ImproveCreateArgs} args - Arguments to create a Improve.
     * @example
     * // Create one Improve
     * const Improve = await prisma.improve.create({
     *   data: {
     *     // ... data to create a Improve
     *   }
     * })
     * 
    **/
    create<T extends ImproveCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ImproveCreateArgs<ExtArgs>>
    ): Prisma__ImproveClient<$Result.GetResult<Prisma.$ImprovePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Improves.
     * @param {ImproveCreateManyArgs} args - Arguments to create many Improves.
     * @example
     * // Create many Improves
     * const improve = await prisma.improve.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ImproveCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImproveCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Improves and returns the data saved in the database.
     * @param {ImproveCreateManyAndReturnArgs} args - Arguments to create many Improves.
     * @example
     * // Create many Improves
     * const improve = await prisma.improve.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Improves and only return the `id`
     * const improveWithIdOnly = await prisma.improve.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ImproveCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ImproveCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImprovePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Improve.
     * @param {ImproveDeleteArgs} args - Arguments to delete one Improve.
     * @example
     * // Delete one Improve
     * const Improve = await prisma.improve.delete({
     *   where: {
     *     // ... filter to delete one Improve
     *   }
     * })
     * 
    **/
    delete<T extends ImproveDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ImproveDeleteArgs<ExtArgs>>
    ): Prisma__ImproveClient<$Result.GetResult<Prisma.$ImprovePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Improve.
     * @param {ImproveUpdateArgs} args - Arguments to update one Improve.
     * @example
     * // Update one Improve
     * const improve = await prisma.improve.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImproveUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ImproveUpdateArgs<ExtArgs>>
    ): Prisma__ImproveClient<$Result.GetResult<Prisma.$ImprovePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Improves.
     * @param {ImproveDeleteManyArgs} args - Arguments to filter Improves to delete.
     * @example
     * // Delete a few Improves
     * const { count } = await prisma.improve.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImproveDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImproveDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Improves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImproveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Improves
     * const improve = await prisma.improve.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImproveUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ImproveUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Improve.
     * @param {ImproveUpsertArgs} args - Arguments to update or create a Improve.
     * @example
     * // Update or create a Improve
     * const improve = await prisma.improve.upsert({
     *   create: {
     *     // ... data to create a Improve
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Improve we want to update
     *   }
     * })
    **/
    upsert<T extends ImproveUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ImproveUpsertArgs<ExtArgs>>
    ): Prisma__ImproveClient<$Result.GetResult<Prisma.$ImprovePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Improves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImproveCountArgs} args - Arguments to filter Improves to count.
     * @example
     * // Count the number of Improves
     * const count = await prisma.improve.count({
     *   where: {
     *     // ... the filter for the Improves we want to count
     *   }
     * })
    **/
    count<T extends ImproveCountArgs>(
      args?: Subset<T, ImproveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImproveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Improve.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImproveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImproveAggregateArgs>(args: Subset<T, ImproveAggregateArgs>): Prisma.PrismaPromise<GetImproveAggregateType<T>>

    /**
     * Group by Improve.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImproveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImproveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImproveGroupByArgs['orderBy'] }
        : { orderBy?: ImproveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImproveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImproveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Improve model
   */
  readonly fields: ImproveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Improve.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImproveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    activities<T extends Improve$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, Improve$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActicityPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Improve model
   */ 
  interface ImproveFieldRefs {
    readonly id: FieldRef<"Improve", 'String'>
    readonly name: FieldRef<"Improve", 'String'>
    readonly value: FieldRef<"Improve", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Improve findUnique
   */
  export type ImproveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Improve
     */
    select?: ImproveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImproveInclude<ExtArgs> | null
    /**
     * Filter, which Improve to fetch.
     */
    where: ImproveWhereUniqueInput
  }

  /**
   * Improve findUniqueOrThrow
   */
  export type ImproveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Improve
     */
    select?: ImproveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImproveInclude<ExtArgs> | null
    /**
     * Filter, which Improve to fetch.
     */
    where: ImproveWhereUniqueInput
  }

  /**
   * Improve findFirst
   */
  export type ImproveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Improve
     */
    select?: ImproveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImproveInclude<ExtArgs> | null
    /**
     * Filter, which Improve to fetch.
     */
    where?: ImproveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Improves to fetch.
     */
    orderBy?: ImproveOrderByWithRelationInput | ImproveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Improves.
     */
    cursor?: ImproveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Improves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Improves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Improves.
     */
    distinct?: ImproveScalarFieldEnum | ImproveScalarFieldEnum[]
  }

  /**
   * Improve findFirstOrThrow
   */
  export type ImproveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Improve
     */
    select?: ImproveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImproveInclude<ExtArgs> | null
    /**
     * Filter, which Improve to fetch.
     */
    where?: ImproveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Improves to fetch.
     */
    orderBy?: ImproveOrderByWithRelationInput | ImproveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Improves.
     */
    cursor?: ImproveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Improves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Improves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Improves.
     */
    distinct?: ImproveScalarFieldEnum | ImproveScalarFieldEnum[]
  }

  /**
   * Improve findMany
   */
  export type ImproveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Improve
     */
    select?: ImproveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImproveInclude<ExtArgs> | null
    /**
     * Filter, which Improves to fetch.
     */
    where?: ImproveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Improves to fetch.
     */
    orderBy?: ImproveOrderByWithRelationInput | ImproveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Improves.
     */
    cursor?: ImproveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Improves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Improves.
     */
    skip?: number
    distinct?: ImproveScalarFieldEnum | ImproveScalarFieldEnum[]
  }

  /**
   * Improve create
   */
  export type ImproveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Improve
     */
    select?: ImproveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImproveInclude<ExtArgs> | null
    /**
     * The data needed to create a Improve.
     */
    data: XOR<ImproveCreateInput, ImproveUncheckedCreateInput>
  }

  /**
   * Improve createMany
   */
  export type ImproveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Improves.
     */
    data: ImproveCreateManyInput | ImproveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Improve createManyAndReturn
   */
  export type ImproveCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Improve
     */
    select?: ImproveSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Improves.
     */
    data: ImproveCreateManyInput | ImproveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Improve update
   */
  export type ImproveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Improve
     */
    select?: ImproveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImproveInclude<ExtArgs> | null
    /**
     * The data needed to update a Improve.
     */
    data: XOR<ImproveUpdateInput, ImproveUncheckedUpdateInput>
    /**
     * Choose, which Improve to update.
     */
    where: ImproveWhereUniqueInput
  }

  /**
   * Improve updateMany
   */
  export type ImproveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Improves.
     */
    data: XOR<ImproveUpdateManyMutationInput, ImproveUncheckedUpdateManyInput>
    /**
     * Filter which Improves to update
     */
    where?: ImproveWhereInput
  }

  /**
   * Improve upsert
   */
  export type ImproveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Improve
     */
    select?: ImproveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImproveInclude<ExtArgs> | null
    /**
     * The filter to search for the Improve to update in case it exists.
     */
    where: ImproveWhereUniqueInput
    /**
     * In case the Improve found by the `where` argument doesn't exist, create a new Improve with this data.
     */
    create: XOR<ImproveCreateInput, ImproveUncheckedCreateInput>
    /**
     * In case the Improve was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImproveUpdateInput, ImproveUncheckedUpdateInput>
  }

  /**
   * Improve delete
   */
  export type ImproveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Improve
     */
    select?: ImproveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImproveInclude<ExtArgs> | null
    /**
     * Filter which Improve to delete.
     */
    where: ImproveWhereUniqueInput
  }

  /**
   * Improve deleteMany
   */
  export type ImproveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Improves to delete
     */
    where?: ImproveWhereInput
  }

  /**
   * Improve.activities
   */
  export type Improve$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acticity
     */
    select?: ActicitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActicityInclude<ExtArgs> | null
    where?: ActicityWhereInput
    orderBy?: ActicityOrderByWithRelationInput | ActicityOrderByWithRelationInput[]
    cursor?: ActicityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActicityScalarFieldEnum | ActicityScalarFieldEnum[]
  }

  /**
   * Improve without action
   */
  export type ImproveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Improve
     */
    select?: ImproveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImproveInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    surname: 'surname',
    email: 'email',
    passwordHash: 'passwordHash'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ExerciseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    userId: 'userId',
    difficultyId: 'difficultyId'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const WorkoutScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    userId: 'userId',
    difficultyId: 'difficultyId'
  };

  export type WorkoutScalarFieldEnum = (typeof WorkoutScalarFieldEnum)[keyof typeof WorkoutScalarFieldEnum]


  export const ProgressionScalarFieldEnum: {
    id: 'id',
    workoutId: 'workoutId',
    createdAt: 'createdAt'
  };

  export type ProgressionScalarFieldEnum = (typeof ProgressionScalarFieldEnum)[keyof typeof ProgressionScalarFieldEnum]


  export const ActicityScalarFieldEnum: {
    id: 'id',
    order: 'order',
    sets: 'sets',
    reps: 'reps',
    progressionId: 'progressionId',
    exerciseId: 'exerciseId',
    improveId: 'improveId'
  };

  export type ActicityScalarFieldEnum = (typeof ActicityScalarFieldEnum)[keyof typeof ActicityScalarFieldEnum]


  export const MuscleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value'
  };

  export type MuscleScalarFieldEnum = (typeof MuscleScalarFieldEnum)[keyof typeof MuscleScalarFieldEnum]


  export const DifficultyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value',
    level: 'level'
  };

  export type DifficultyScalarFieldEnum = (typeof DifficultyScalarFieldEnum)[keyof typeof DifficultyScalarFieldEnum]


  export const ImproveScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value'
  };

  export type ImproveScalarFieldEnum = (typeof ImproveScalarFieldEnum)[keyof typeof ImproveScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    surname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    exercises?: ExerciseListRelationFilter
    workout?: WorkoutListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    exercises?: ExerciseOrderByRelationAggregateInput
    workout?: WorkoutOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    surname?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    exercises?: ExerciseListRelationFilter
    workout?: WorkoutListRelationFilter
  }, "id" | "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    surname?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
  }

  export type ExerciseWhereInput = {
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    id?: StringFilter<"Exercise"> | string
    name?: StringFilter<"Exercise"> | string
    description?: StringNullableFilter<"Exercise"> | string | null
    userId?: StringFilter<"Exercise"> | string
    difficultyId?: StringFilter<"Exercise"> | string
    muscles?: MuscleListRelationFilter
    activities?: ActicityListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
    difficulty?: XOR<DifficultyRelationFilter, DifficultyWhereInput>
  }

  export type ExerciseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    difficultyId?: SortOrder
    muscles?: MuscleOrderByRelationAggregateInput
    activities?: ActicityOrderByRelationAggregateInput
    User?: UserOrderByWithRelationInput
    difficulty?: DifficultyOrderByWithRelationInput
  }

  export type ExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    description?: StringNullableFilter<"Exercise"> | string | null
    userId?: StringFilter<"Exercise"> | string
    difficultyId?: StringFilter<"Exercise"> | string
    muscles?: MuscleListRelationFilter
    activities?: ActicityListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
    difficulty?: XOR<DifficultyRelationFilter, DifficultyWhereInput>
  }, "id" | "id" | "name">

  export type ExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    difficultyId?: SortOrder
    _count?: ExerciseCountOrderByAggregateInput
    _max?: ExerciseMaxOrderByAggregateInput
    _min?: ExerciseMinOrderByAggregateInput
  }

  export type ExerciseScalarWhereWithAggregatesInput = {
    AND?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    OR?: ExerciseScalarWhereWithAggregatesInput[]
    NOT?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exercise"> | string
    name?: StringWithAggregatesFilter<"Exercise"> | string
    description?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
    userId?: StringWithAggregatesFilter<"Exercise"> | string
    difficultyId?: StringWithAggregatesFilter<"Exercise"> | string
  }

  export type WorkoutWhereInput = {
    AND?: WorkoutWhereInput | WorkoutWhereInput[]
    OR?: WorkoutWhereInput[]
    NOT?: WorkoutWhereInput | WorkoutWhereInput[]
    id?: StringFilter<"Workout"> | string
    name?: StringFilter<"Workout"> | string
    description?: StringNullableFilter<"Workout"> | string | null
    userId?: StringFilter<"Workout"> | string
    difficultyId?: StringFilter<"Workout"> | string
    muscles?: MuscleListRelationFilter
    progressions?: ProgressionListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    difficulty?: XOR<DifficultyRelationFilter, DifficultyWhereInput>
  }

  export type WorkoutOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    difficultyId?: SortOrder
    muscles?: MuscleOrderByRelationAggregateInput
    progressions?: ProgressionOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    difficulty?: DifficultyOrderByWithRelationInput
  }

  export type WorkoutWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: WorkoutWhereInput | WorkoutWhereInput[]
    OR?: WorkoutWhereInput[]
    NOT?: WorkoutWhereInput | WorkoutWhereInput[]
    description?: StringNullableFilter<"Workout"> | string | null
    userId?: StringFilter<"Workout"> | string
    difficultyId?: StringFilter<"Workout"> | string
    muscles?: MuscleListRelationFilter
    progressions?: ProgressionListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    difficulty?: XOR<DifficultyRelationFilter, DifficultyWhereInput>
  }, "id" | "id" | "name">

  export type WorkoutOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    difficultyId?: SortOrder
    _count?: WorkoutCountOrderByAggregateInput
    _max?: WorkoutMaxOrderByAggregateInput
    _min?: WorkoutMinOrderByAggregateInput
  }

  export type WorkoutScalarWhereWithAggregatesInput = {
    AND?: WorkoutScalarWhereWithAggregatesInput | WorkoutScalarWhereWithAggregatesInput[]
    OR?: WorkoutScalarWhereWithAggregatesInput[]
    NOT?: WorkoutScalarWhereWithAggregatesInput | WorkoutScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Workout"> | string
    name?: StringWithAggregatesFilter<"Workout"> | string
    description?: StringNullableWithAggregatesFilter<"Workout"> | string | null
    userId?: StringWithAggregatesFilter<"Workout"> | string
    difficultyId?: StringWithAggregatesFilter<"Workout"> | string
  }

  export type ProgressionWhereInput = {
    AND?: ProgressionWhereInput | ProgressionWhereInput[]
    OR?: ProgressionWhereInput[]
    NOT?: ProgressionWhereInput | ProgressionWhereInput[]
    id?: StringFilter<"Progression"> | string
    workoutId?: StringFilter<"Progression"> | string
    createdAt?: DateTimeFilter<"Progression"> | Date | string
    workout?: XOR<WorkoutRelationFilter, WorkoutWhereInput>
    activities?: ActicityListRelationFilter
  }

  export type ProgressionOrderByWithRelationInput = {
    id?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    workout?: WorkoutOrderByWithRelationInput
    activities?: ActicityOrderByRelationAggregateInput
  }

  export type ProgressionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProgressionWhereInput | ProgressionWhereInput[]
    OR?: ProgressionWhereInput[]
    NOT?: ProgressionWhereInput | ProgressionWhereInput[]
    workoutId?: StringFilter<"Progression"> | string
    createdAt?: DateTimeFilter<"Progression"> | Date | string
    workout?: XOR<WorkoutRelationFilter, WorkoutWhereInput>
    activities?: ActicityListRelationFilter
  }, "id" | "id">

  export type ProgressionOrderByWithAggregationInput = {
    id?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
    _count?: ProgressionCountOrderByAggregateInput
    _max?: ProgressionMaxOrderByAggregateInput
    _min?: ProgressionMinOrderByAggregateInput
  }

  export type ProgressionScalarWhereWithAggregatesInput = {
    AND?: ProgressionScalarWhereWithAggregatesInput | ProgressionScalarWhereWithAggregatesInput[]
    OR?: ProgressionScalarWhereWithAggregatesInput[]
    NOT?: ProgressionScalarWhereWithAggregatesInput | ProgressionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Progression"> | string
    workoutId?: StringWithAggregatesFilter<"Progression"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Progression"> | Date | string
  }

  export type ActicityWhereInput = {
    AND?: ActicityWhereInput | ActicityWhereInput[]
    OR?: ActicityWhereInput[]
    NOT?: ActicityWhereInput | ActicityWhereInput[]
    id?: StringFilter<"Acticity"> | string
    order?: IntFilter<"Acticity"> | number
    sets?: IntFilter<"Acticity"> | number
    reps?: IntFilter<"Acticity"> | number
    progressionId?: StringFilter<"Acticity"> | string
    exerciseId?: StringFilter<"Acticity"> | string
    improveId?: StringNullableFilter<"Acticity"> | string | null
    progression?: XOR<ProgressionRelationFilter, ProgressionWhereInput>
    exercise?: XOR<ExerciseRelationFilter, ExerciseWhereInput>
    improve?: XOR<ImproveNullableRelationFilter, ImproveWhereInput> | null
  }

  export type ActicityOrderByWithRelationInput = {
    id?: SortOrder
    order?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    progressionId?: SortOrder
    exerciseId?: SortOrder
    improveId?: SortOrderInput | SortOrder
    progression?: ProgressionOrderByWithRelationInput
    exercise?: ExerciseOrderByWithRelationInput
    improve?: ImproveOrderByWithRelationInput
  }

  export type ActicityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActicityWhereInput | ActicityWhereInput[]
    OR?: ActicityWhereInput[]
    NOT?: ActicityWhereInput | ActicityWhereInput[]
    order?: IntFilter<"Acticity"> | number
    sets?: IntFilter<"Acticity"> | number
    reps?: IntFilter<"Acticity"> | number
    progressionId?: StringFilter<"Acticity"> | string
    exerciseId?: StringFilter<"Acticity"> | string
    improveId?: StringNullableFilter<"Acticity"> | string | null
    progression?: XOR<ProgressionRelationFilter, ProgressionWhereInput>
    exercise?: XOR<ExerciseRelationFilter, ExerciseWhereInput>
    improve?: XOR<ImproveNullableRelationFilter, ImproveWhereInput> | null
  }, "id" | "id">

  export type ActicityOrderByWithAggregationInput = {
    id?: SortOrder
    order?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    progressionId?: SortOrder
    exerciseId?: SortOrder
    improveId?: SortOrderInput | SortOrder
    _count?: ActicityCountOrderByAggregateInput
    _avg?: ActicityAvgOrderByAggregateInput
    _max?: ActicityMaxOrderByAggregateInput
    _min?: ActicityMinOrderByAggregateInput
    _sum?: ActicitySumOrderByAggregateInput
  }

  export type ActicityScalarWhereWithAggregatesInput = {
    AND?: ActicityScalarWhereWithAggregatesInput | ActicityScalarWhereWithAggregatesInput[]
    OR?: ActicityScalarWhereWithAggregatesInput[]
    NOT?: ActicityScalarWhereWithAggregatesInput | ActicityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Acticity"> | string
    order?: IntWithAggregatesFilter<"Acticity"> | number
    sets?: IntWithAggregatesFilter<"Acticity"> | number
    reps?: IntWithAggregatesFilter<"Acticity"> | number
    progressionId?: StringWithAggregatesFilter<"Acticity"> | string
    exerciseId?: StringWithAggregatesFilter<"Acticity"> | string
    improveId?: StringNullableWithAggregatesFilter<"Acticity"> | string | null
  }

  export type MuscleWhereInput = {
    AND?: MuscleWhereInput | MuscleWhereInput[]
    OR?: MuscleWhereInput[]
    NOT?: MuscleWhereInput | MuscleWhereInput[]
    id?: StringFilter<"Muscle"> | string
    name?: StringFilter<"Muscle"> | string
    value?: StringFilter<"Muscle"> | string
    exercises?: ExerciseListRelationFilter
    workouts?: WorkoutListRelationFilter
  }

  export type MuscleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    exercises?: ExerciseOrderByRelationAggregateInput
    workouts?: WorkoutOrderByRelationAggregateInput
  }

  export type MuscleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    value?: string
    AND?: MuscleWhereInput | MuscleWhereInput[]
    OR?: MuscleWhereInput[]
    NOT?: MuscleWhereInput | MuscleWhereInput[]
    exercises?: ExerciseListRelationFilter
    workouts?: WorkoutListRelationFilter
  }, "id" | "id" | "name" | "value">

  export type MuscleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    _count?: MuscleCountOrderByAggregateInput
    _max?: MuscleMaxOrderByAggregateInput
    _min?: MuscleMinOrderByAggregateInput
  }

  export type MuscleScalarWhereWithAggregatesInput = {
    AND?: MuscleScalarWhereWithAggregatesInput | MuscleScalarWhereWithAggregatesInput[]
    OR?: MuscleScalarWhereWithAggregatesInput[]
    NOT?: MuscleScalarWhereWithAggregatesInput | MuscleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Muscle"> | string
    name?: StringWithAggregatesFilter<"Muscle"> | string
    value?: StringWithAggregatesFilter<"Muscle"> | string
  }

  export type DifficultyWhereInput = {
    AND?: DifficultyWhereInput | DifficultyWhereInput[]
    OR?: DifficultyWhereInput[]
    NOT?: DifficultyWhereInput | DifficultyWhereInput[]
    id?: StringFilter<"Difficulty"> | string
    name?: StringFilter<"Difficulty"> | string
    value?: StringFilter<"Difficulty"> | string
    level?: IntFilter<"Difficulty"> | number
    exercises?: ExerciseListRelationFilter
    workouts?: WorkoutListRelationFilter
  }

  export type DifficultyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    level?: SortOrder
    exercises?: ExerciseOrderByRelationAggregateInput
    workouts?: WorkoutOrderByRelationAggregateInput
  }

  export type DifficultyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    value?: string
    level?: number
    AND?: DifficultyWhereInput | DifficultyWhereInput[]
    OR?: DifficultyWhereInput[]
    NOT?: DifficultyWhereInput | DifficultyWhereInput[]
    exercises?: ExerciseListRelationFilter
    workouts?: WorkoutListRelationFilter
  }, "id" | "id" | "name" | "value" | "level">

  export type DifficultyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    level?: SortOrder
    _count?: DifficultyCountOrderByAggregateInput
    _avg?: DifficultyAvgOrderByAggregateInput
    _max?: DifficultyMaxOrderByAggregateInput
    _min?: DifficultyMinOrderByAggregateInput
    _sum?: DifficultySumOrderByAggregateInput
  }

  export type DifficultyScalarWhereWithAggregatesInput = {
    AND?: DifficultyScalarWhereWithAggregatesInput | DifficultyScalarWhereWithAggregatesInput[]
    OR?: DifficultyScalarWhereWithAggregatesInput[]
    NOT?: DifficultyScalarWhereWithAggregatesInput | DifficultyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Difficulty"> | string
    name?: StringWithAggregatesFilter<"Difficulty"> | string
    value?: StringWithAggregatesFilter<"Difficulty"> | string
    level?: IntWithAggregatesFilter<"Difficulty"> | number
  }

  export type ImproveWhereInput = {
    AND?: ImproveWhereInput | ImproveWhereInput[]
    OR?: ImproveWhereInput[]
    NOT?: ImproveWhereInput | ImproveWhereInput[]
    id?: StringFilter<"Improve"> | string
    name?: StringFilter<"Improve"> | string
    value?: StringFilter<"Improve"> | string
    activities?: ActicityListRelationFilter
  }

  export type ImproveOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    activities?: ActicityOrderByRelationAggregateInput
  }

  export type ImproveWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    value?: string
    AND?: ImproveWhereInput | ImproveWhereInput[]
    OR?: ImproveWhereInput[]
    NOT?: ImproveWhereInput | ImproveWhereInput[]
    activities?: ActicityListRelationFilter
  }, "id" | "id" | "name" | "value">

  export type ImproveOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    _count?: ImproveCountOrderByAggregateInput
    _max?: ImproveMaxOrderByAggregateInput
    _min?: ImproveMinOrderByAggregateInput
  }

  export type ImproveScalarWhereWithAggregatesInput = {
    AND?: ImproveScalarWhereWithAggregatesInput | ImproveScalarWhereWithAggregatesInput[]
    OR?: ImproveScalarWhereWithAggregatesInput[]
    NOT?: ImproveScalarWhereWithAggregatesInput | ImproveScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Improve"> | string
    name?: StringWithAggregatesFilter<"Improve"> | string
    value?: StringWithAggregatesFilter<"Improve"> | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    surname: string
    email: string
    passwordHash: string
    exercises?: ExerciseCreateNestedManyWithoutUserInput
    workout?: WorkoutCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    surname: string
    email: string
    passwordHash: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutUserInput
    workout?: WorkoutUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUpdateManyWithoutUserNestedInput
    workout?: WorkoutUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
    workout?: WorkoutUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    surname: string
    email: string
    passwordHash: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseCreateInput = {
    id?: string
    name: string
    description?: string | null
    muscles?: MuscleCreateNestedManyWithoutExercisesInput
    activities?: ActicityCreateNestedManyWithoutExerciseInput
    User: UserCreateNestedOneWithoutExercisesInput
    difficulty: DifficultyCreateNestedOneWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    difficultyId: string
    muscles?: MuscleUncheckedCreateNestedManyWithoutExercisesInput
    activities?: ActicityUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: MuscleUpdateManyWithoutExercisesNestedInput
    activities?: ActicityUpdateManyWithoutExerciseNestedInput
    User?: UserUpdateOneRequiredWithoutExercisesNestedInput
    difficulty?: DifficultyUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    difficultyId?: StringFieldUpdateOperationsInput | string
    muscles?: MuscleUncheckedUpdateManyWithoutExercisesNestedInput
    activities?: ActicityUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    difficultyId: string
  }

  export type ExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    difficultyId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkoutCreateInput = {
    id?: string
    name: string
    description?: string | null
    muscles?: MuscleCreateNestedManyWithoutWorkoutsInput
    progressions?: ProgressionCreateNestedManyWithoutWorkoutInput
    user: UserCreateNestedOneWithoutWorkoutInput
    difficulty: DifficultyCreateNestedOneWithoutWorkoutsInput
  }

  export type WorkoutUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    difficultyId: string
    muscles?: MuscleUncheckedCreateNestedManyWithoutWorkoutsInput
    progressions?: ProgressionUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: MuscleUpdateManyWithoutWorkoutsNestedInput
    progressions?: ProgressionUpdateManyWithoutWorkoutNestedInput
    user?: UserUpdateOneRequiredWithoutWorkoutNestedInput
    difficulty?: DifficultyUpdateOneRequiredWithoutWorkoutsNestedInput
  }

  export type WorkoutUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    difficultyId?: StringFieldUpdateOperationsInput | string
    muscles?: MuscleUncheckedUpdateManyWithoutWorkoutsNestedInput
    progressions?: ProgressionUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    difficultyId: string
  }

  export type WorkoutUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkoutUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    difficultyId?: StringFieldUpdateOperationsInput | string
  }

  export type ProgressionCreateInput = {
    id?: string
    createdAt?: Date | string
    workout: WorkoutCreateNestedOneWithoutProgressionsInput
    activities?: ActicityCreateNestedManyWithoutProgressionInput
  }

  export type ProgressionUncheckedCreateInput = {
    id?: string
    workoutId: string
    createdAt?: Date | string
    activities?: ActicityUncheckedCreateNestedManyWithoutProgressionInput
  }

  export type ProgressionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workout?: WorkoutUpdateOneRequiredWithoutProgressionsNestedInput
    activities?: ActicityUpdateManyWithoutProgressionNestedInput
  }

  export type ProgressionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActicityUncheckedUpdateManyWithoutProgressionNestedInput
  }

  export type ProgressionCreateManyInput = {
    id?: string
    workoutId: string
    createdAt?: Date | string
  }

  export type ProgressionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgressionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActicityCreateInput = {
    id?: string
    order: number
    sets: number
    reps: number
    progression: ProgressionCreateNestedOneWithoutActivitiesInput
    exercise: ExerciseCreateNestedOneWithoutActivitiesInput
    improve?: ImproveCreateNestedOneWithoutActivitiesInput
  }

  export type ActicityUncheckedCreateInput = {
    id?: string
    order: number
    sets: number
    reps: number
    progressionId: string
    exerciseId: string
    improveId?: string | null
  }

  export type ActicityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    progression?: ProgressionUpdateOneRequiredWithoutActivitiesNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutActivitiesNestedInput
    improve?: ImproveUpdateOneWithoutActivitiesNestedInput
  }

  export type ActicityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    progressionId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    improveId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActicityCreateManyInput = {
    id?: string
    order: number
    sets: number
    reps: number
    progressionId: string
    exerciseId: string
    improveId?: string | null
  }

  export type ActicityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
  }

  export type ActicityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    progressionId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    improveId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MuscleCreateInput = {
    id?: string
    name: string
    value: string
    exercises?: ExerciseCreateNestedManyWithoutMusclesInput
    workouts?: WorkoutCreateNestedManyWithoutMusclesInput
  }

  export type MuscleUncheckedCreateInput = {
    id?: string
    name: string
    value: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutMusclesInput
    workouts?: WorkoutUncheckedCreateNestedManyWithoutMusclesInput
  }

  export type MuscleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUpdateManyWithoutMusclesNestedInput
    workouts?: WorkoutUpdateManyWithoutMusclesNestedInput
  }

  export type MuscleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutMusclesNestedInput
    workouts?: WorkoutUncheckedUpdateManyWithoutMusclesNestedInput
  }

  export type MuscleCreateManyInput = {
    id?: string
    name: string
    value: string
  }

  export type MuscleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type MuscleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type DifficultyCreateInput = {
    id?: string
    name: string
    value: string
    level: number
    exercises?: ExerciseCreateNestedManyWithoutDifficultyInput
    workouts?: WorkoutCreateNestedManyWithoutDifficultyInput
  }

  export type DifficultyUncheckedCreateInput = {
    id?: string
    name: string
    value: string
    level: number
    exercises?: ExerciseUncheckedCreateNestedManyWithoutDifficultyInput
    workouts?: WorkoutUncheckedCreateNestedManyWithoutDifficultyInput
  }

  export type DifficultyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    exercises?: ExerciseUpdateManyWithoutDifficultyNestedInput
    workouts?: WorkoutUpdateManyWithoutDifficultyNestedInput
  }

  export type DifficultyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    exercises?: ExerciseUncheckedUpdateManyWithoutDifficultyNestedInput
    workouts?: WorkoutUncheckedUpdateManyWithoutDifficultyNestedInput
  }

  export type DifficultyCreateManyInput = {
    id?: string
    name: string
    value: string
    level: number
  }

  export type DifficultyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type DifficultyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type ImproveCreateInput = {
    id?: string
    name: string
    value: string
    activities?: ActicityCreateNestedManyWithoutImproveInput
  }

  export type ImproveUncheckedCreateInput = {
    id?: string
    name: string
    value: string
    activities?: ActicityUncheckedCreateNestedManyWithoutImproveInput
  }

  export type ImproveUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    activities?: ActicityUpdateManyWithoutImproveNestedInput
  }

  export type ImproveUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    activities?: ActicityUncheckedUpdateManyWithoutImproveNestedInput
  }

  export type ImproveCreateManyInput = {
    id?: string
    name: string
    value: string
  }

  export type ImproveUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ImproveUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ExerciseListRelationFilter = {
    every?: ExerciseWhereInput
    some?: ExerciseWhereInput
    none?: ExerciseWhereInput
  }

  export type WorkoutListRelationFilter = {
    every?: WorkoutWhereInput
    some?: WorkoutWhereInput
    none?: WorkoutWhereInput
  }

  export type ExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type MuscleListRelationFilter = {
    every?: MuscleWhereInput
    some?: MuscleWhereInput
    none?: MuscleWhereInput
  }

  export type ActicityListRelationFilter = {
    every?: ActicityWhereInput
    some?: ActicityWhereInput
    none?: ActicityWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DifficultyRelationFilter = {
    is?: DifficultyWhereInput
    isNot?: DifficultyWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MuscleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActicityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    difficultyId?: SortOrder
  }

  export type ExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    difficultyId?: SortOrder
  }

  export type ExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    difficultyId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ProgressionListRelationFilter = {
    every?: ProgressionWhereInput
    some?: ProgressionWhereInput
    none?: ProgressionWhereInput
  }

  export type ProgressionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkoutCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    difficultyId?: SortOrder
  }

  export type WorkoutMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    difficultyId?: SortOrder
  }

  export type WorkoutMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    difficultyId?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type WorkoutRelationFilter = {
    is?: WorkoutWhereInput
    isNot?: WorkoutWhereInput
  }

  export type ProgressionCountOrderByAggregateInput = {
    id?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProgressionMaxOrderByAggregateInput = {
    id?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProgressionMinOrderByAggregateInput = {
    id?: SortOrder
    workoutId?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ProgressionRelationFilter = {
    is?: ProgressionWhereInput
    isNot?: ProgressionWhereInput
  }

  export type ExerciseRelationFilter = {
    is?: ExerciseWhereInput
    isNot?: ExerciseWhereInput
  }

  export type ImproveNullableRelationFilter = {
    is?: ImproveWhereInput | null
    isNot?: ImproveWhereInput | null
  }

  export type ActicityCountOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    progressionId?: SortOrder
    exerciseId?: SortOrder
    improveId?: SortOrder
  }

  export type ActicityAvgOrderByAggregateInput = {
    order?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
  }

  export type ActicityMaxOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    progressionId?: SortOrder
    exerciseId?: SortOrder
    improveId?: SortOrder
  }

  export type ActicityMinOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    progressionId?: SortOrder
    exerciseId?: SortOrder
    improveId?: SortOrder
  }

  export type ActicitySumOrderByAggregateInput = {
    order?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type MuscleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
  }

  export type MuscleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
  }

  export type MuscleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
  }

  export type DifficultyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    level?: SortOrder
  }

  export type DifficultyAvgOrderByAggregateInput = {
    level?: SortOrder
  }

  export type DifficultyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    level?: SortOrder
  }

  export type DifficultyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    level?: SortOrder
  }

  export type DifficultySumOrderByAggregateInput = {
    level?: SortOrder
  }

  export type ImproveCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
  }

  export type ImproveMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
  }

  export type ImproveMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
  }

  export type ExerciseCreateNestedManyWithoutUserInput = {
    create?: XOR<ExerciseCreateWithoutUserInput, ExerciseUncheckedCreateWithoutUserInput> | ExerciseCreateWithoutUserInput[] | ExerciseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutUserInput | ExerciseCreateOrConnectWithoutUserInput[]
    createMany?: ExerciseCreateManyUserInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type WorkoutCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutCreateWithoutUserInput, WorkoutUncheckedCreateWithoutUserInput> | WorkoutCreateWithoutUserInput[] | WorkoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutUserInput | WorkoutCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutCreateManyUserInputEnvelope
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ExerciseCreateWithoutUserInput, ExerciseUncheckedCreateWithoutUserInput> | ExerciseCreateWithoutUserInput[] | ExerciseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutUserInput | ExerciseCreateOrConnectWithoutUserInput[]
    createMany?: ExerciseCreateManyUserInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type WorkoutUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkoutCreateWithoutUserInput, WorkoutUncheckedCreateWithoutUserInput> | WorkoutCreateWithoutUserInput[] | WorkoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutUserInput | WorkoutCreateOrConnectWithoutUserInput[]
    createMany?: WorkoutCreateManyUserInputEnvelope
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ExerciseUpdateManyWithoutUserNestedInput = {
    create?: XOR<ExerciseCreateWithoutUserInput, ExerciseUncheckedCreateWithoutUserInput> | ExerciseCreateWithoutUserInput[] | ExerciseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutUserInput | ExerciseCreateOrConnectWithoutUserInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutUserInput | ExerciseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ExerciseCreateManyUserInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutUserInput | ExerciseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutUserInput | ExerciseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type WorkoutUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutCreateWithoutUserInput, WorkoutUncheckedCreateWithoutUserInput> | WorkoutCreateWithoutUserInput[] | WorkoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutUserInput | WorkoutCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutUpsertWithWhereUniqueWithoutUserInput | WorkoutUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutCreateManyUserInputEnvelope
    set?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    disconnect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    delete?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    update?: WorkoutUpdateWithWhereUniqueWithoutUserInput | WorkoutUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutUpdateManyWithWhereWithoutUserInput | WorkoutUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ExerciseCreateWithoutUserInput, ExerciseUncheckedCreateWithoutUserInput> | ExerciseCreateWithoutUserInput[] | ExerciseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutUserInput | ExerciseCreateOrConnectWithoutUserInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutUserInput | ExerciseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ExerciseCreateManyUserInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutUserInput | ExerciseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutUserInput | ExerciseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type WorkoutUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkoutCreateWithoutUserInput, WorkoutUncheckedCreateWithoutUserInput> | WorkoutCreateWithoutUserInput[] | WorkoutUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutUserInput | WorkoutCreateOrConnectWithoutUserInput[]
    upsert?: WorkoutUpsertWithWhereUniqueWithoutUserInput | WorkoutUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkoutCreateManyUserInputEnvelope
    set?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    disconnect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    delete?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    update?: WorkoutUpdateWithWhereUniqueWithoutUserInput | WorkoutUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkoutUpdateManyWithWhereWithoutUserInput | WorkoutUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
  }

  export type MuscleCreateNestedManyWithoutExercisesInput = {
    create?: XOR<MuscleCreateWithoutExercisesInput, MuscleUncheckedCreateWithoutExercisesInput> | MuscleCreateWithoutExercisesInput[] | MuscleUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: MuscleCreateOrConnectWithoutExercisesInput | MuscleCreateOrConnectWithoutExercisesInput[]
    connect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
  }

  export type ActicityCreateNestedManyWithoutExerciseInput = {
    create?: XOR<ActicityCreateWithoutExerciseInput, ActicityUncheckedCreateWithoutExerciseInput> | ActicityCreateWithoutExerciseInput[] | ActicityUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: ActicityCreateOrConnectWithoutExerciseInput | ActicityCreateOrConnectWithoutExerciseInput[]
    createMany?: ActicityCreateManyExerciseInputEnvelope
    connect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutExercisesInput = {
    create?: XOR<UserCreateWithoutExercisesInput, UserUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: UserCreateOrConnectWithoutExercisesInput
    connect?: UserWhereUniqueInput
  }

  export type DifficultyCreateNestedOneWithoutExercisesInput = {
    create?: XOR<DifficultyCreateWithoutExercisesInput, DifficultyUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: DifficultyCreateOrConnectWithoutExercisesInput
    connect?: DifficultyWhereUniqueInput
  }

  export type MuscleUncheckedCreateNestedManyWithoutExercisesInput = {
    create?: XOR<MuscleCreateWithoutExercisesInput, MuscleUncheckedCreateWithoutExercisesInput> | MuscleCreateWithoutExercisesInput[] | MuscleUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: MuscleCreateOrConnectWithoutExercisesInput | MuscleCreateOrConnectWithoutExercisesInput[]
    connect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
  }

  export type ActicityUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<ActicityCreateWithoutExerciseInput, ActicityUncheckedCreateWithoutExerciseInput> | ActicityCreateWithoutExerciseInput[] | ActicityUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: ActicityCreateOrConnectWithoutExerciseInput | ActicityCreateOrConnectWithoutExerciseInput[]
    createMany?: ActicityCreateManyExerciseInputEnvelope
    connect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MuscleUpdateManyWithoutExercisesNestedInput = {
    create?: XOR<MuscleCreateWithoutExercisesInput, MuscleUncheckedCreateWithoutExercisesInput> | MuscleCreateWithoutExercisesInput[] | MuscleUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: MuscleCreateOrConnectWithoutExercisesInput | MuscleCreateOrConnectWithoutExercisesInput[]
    upsert?: MuscleUpsertWithWhereUniqueWithoutExercisesInput | MuscleUpsertWithWhereUniqueWithoutExercisesInput[]
    set?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    disconnect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    delete?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    connect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    update?: MuscleUpdateWithWhereUniqueWithoutExercisesInput | MuscleUpdateWithWhereUniqueWithoutExercisesInput[]
    updateMany?: MuscleUpdateManyWithWhereWithoutExercisesInput | MuscleUpdateManyWithWhereWithoutExercisesInput[]
    deleteMany?: MuscleScalarWhereInput | MuscleScalarWhereInput[]
  }

  export type ActicityUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<ActicityCreateWithoutExerciseInput, ActicityUncheckedCreateWithoutExerciseInput> | ActicityCreateWithoutExerciseInput[] | ActicityUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: ActicityCreateOrConnectWithoutExerciseInput | ActicityCreateOrConnectWithoutExerciseInput[]
    upsert?: ActicityUpsertWithWhereUniqueWithoutExerciseInput | ActicityUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: ActicityCreateManyExerciseInputEnvelope
    set?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    disconnect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    delete?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    connect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    update?: ActicityUpdateWithWhereUniqueWithoutExerciseInput | ActicityUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: ActicityUpdateManyWithWhereWithoutExerciseInput | ActicityUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: ActicityScalarWhereInput | ActicityScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<UserCreateWithoutExercisesInput, UserUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: UserCreateOrConnectWithoutExercisesInput
    upsert?: UserUpsertWithoutExercisesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutExercisesInput, UserUpdateWithoutExercisesInput>, UserUncheckedUpdateWithoutExercisesInput>
  }

  export type DifficultyUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<DifficultyCreateWithoutExercisesInput, DifficultyUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: DifficultyCreateOrConnectWithoutExercisesInput
    upsert?: DifficultyUpsertWithoutExercisesInput
    connect?: DifficultyWhereUniqueInput
    update?: XOR<XOR<DifficultyUpdateToOneWithWhereWithoutExercisesInput, DifficultyUpdateWithoutExercisesInput>, DifficultyUncheckedUpdateWithoutExercisesInput>
  }

  export type MuscleUncheckedUpdateManyWithoutExercisesNestedInput = {
    create?: XOR<MuscleCreateWithoutExercisesInput, MuscleUncheckedCreateWithoutExercisesInput> | MuscleCreateWithoutExercisesInput[] | MuscleUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: MuscleCreateOrConnectWithoutExercisesInput | MuscleCreateOrConnectWithoutExercisesInput[]
    upsert?: MuscleUpsertWithWhereUniqueWithoutExercisesInput | MuscleUpsertWithWhereUniqueWithoutExercisesInput[]
    set?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    disconnect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    delete?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    connect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    update?: MuscleUpdateWithWhereUniqueWithoutExercisesInput | MuscleUpdateWithWhereUniqueWithoutExercisesInput[]
    updateMany?: MuscleUpdateManyWithWhereWithoutExercisesInput | MuscleUpdateManyWithWhereWithoutExercisesInput[]
    deleteMany?: MuscleScalarWhereInput | MuscleScalarWhereInput[]
  }

  export type ActicityUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<ActicityCreateWithoutExerciseInput, ActicityUncheckedCreateWithoutExerciseInput> | ActicityCreateWithoutExerciseInput[] | ActicityUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: ActicityCreateOrConnectWithoutExerciseInput | ActicityCreateOrConnectWithoutExerciseInput[]
    upsert?: ActicityUpsertWithWhereUniqueWithoutExerciseInput | ActicityUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: ActicityCreateManyExerciseInputEnvelope
    set?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    disconnect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    delete?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    connect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    update?: ActicityUpdateWithWhereUniqueWithoutExerciseInput | ActicityUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: ActicityUpdateManyWithWhereWithoutExerciseInput | ActicityUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: ActicityScalarWhereInput | ActicityScalarWhereInput[]
  }

  export type MuscleCreateNestedManyWithoutWorkoutsInput = {
    create?: XOR<MuscleCreateWithoutWorkoutsInput, MuscleUncheckedCreateWithoutWorkoutsInput> | MuscleCreateWithoutWorkoutsInput[] | MuscleUncheckedCreateWithoutWorkoutsInput[]
    connectOrCreate?: MuscleCreateOrConnectWithoutWorkoutsInput | MuscleCreateOrConnectWithoutWorkoutsInput[]
    connect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
  }

  export type ProgressionCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<ProgressionCreateWithoutWorkoutInput, ProgressionUncheckedCreateWithoutWorkoutInput> | ProgressionCreateWithoutWorkoutInput[] | ProgressionUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ProgressionCreateOrConnectWithoutWorkoutInput | ProgressionCreateOrConnectWithoutWorkoutInput[]
    createMany?: ProgressionCreateManyWorkoutInputEnvelope
    connect?: ProgressionWhereUniqueInput | ProgressionWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutWorkoutInput = {
    create?: XOR<UserCreateWithoutWorkoutInput, UserUncheckedCreateWithoutWorkoutInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutInput
    connect?: UserWhereUniqueInput
  }

  export type DifficultyCreateNestedOneWithoutWorkoutsInput = {
    create?: XOR<DifficultyCreateWithoutWorkoutsInput, DifficultyUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: DifficultyCreateOrConnectWithoutWorkoutsInput
    connect?: DifficultyWhereUniqueInput
  }

  export type MuscleUncheckedCreateNestedManyWithoutWorkoutsInput = {
    create?: XOR<MuscleCreateWithoutWorkoutsInput, MuscleUncheckedCreateWithoutWorkoutsInput> | MuscleCreateWithoutWorkoutsInput[] | MuscleUncheckedCreateWithoutWorkoutsInput[]
    connectOrCreate?: MuscleCreateOrConnectWithoutWorkoutsInput | MuscleCreateOrConnectWithoutWorkoutsInput[]
    connect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
  }

  export type ProgressionUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<ProgressionCreateWithoutWorkoutInput, ProgressionUncheckedCreateWithoutWorkoutInput> | ProgressionCreateWithoutWorkoutInput[] | ProgressionUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ProgressionCreateOrConnectWithoutWorkoutInput | ProgressionCreateOrConnectWithoutWorkoutInput[]
    createMany?: ProgressionCreateManyWorkoutInputEnvelope
    connect?: ProgressionWhereUniqueInput | ProgressionWhereUniqueInput[]
  }

  export type MuscleUpdateManyWithoutWorkoutsNestedInput = {
    create?: XOR<MuscleCreateWithoutWorkoutsInput, MuscleUncheckedCreateWithoutWorkoutsInput> | MuscleCreateWithoutWorkoutsInput[] | MuscleUncheckedCreateWithoutWorkoutsInput[]
    connectOrCreate?: MuscleCreateOrConnectWithoutWorkoutsInput | MuscleCreateOrConnectWithoutWorkoutsInput[]
    upsert?: MuscleUpsertWithWhereUniqueWithoutWorkoutsInput | MuscleUpsertWithWhereUniqueWithoutWorkoutsInput[]
    set?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    disconnect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    delete?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    connect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    update?: MuscleUpdateWithWhereUniqueWithoutWorkoutsInput | MuscleUpdateWithWhereUniqueWithoutWorkoutsInput[]
    updateMany?: MuscleUpdateManyWithWhereWithoutWorkoutsInput | MuscleUpdateManyWithWhereWithoutWorkoutsInput[]
    deleteMany?: MuscleScalarWhereInput | MuscleScalarWhereInput[]
  }

  export type ProgressionUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<ProgressionCreateWithoutWorkoutInput, ProgressionUncheckedCreateWithoutWorkoutInput> | ProgressionCreateWithoutWorkoutInput[] | ProgressionUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ProgressionCreateOrConnectWithoutWorkoutInput | ProgressionCreateOrConnectWithoutWorkoutInput[]
    upsert?: ProgressionUpsertWithWhereUniqueWithoutWorkoutInput | ProgressionUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: ProgressionCreateManyWorkoutInputEnvelope
    set?: ProgressionWhereUniqueInput | ProgressionWhereUniqueInput[]
    disconnect?: ProgressionWhereUniqueInput | ProgressionWhereUniqueInput[]
    delete?: ProgressionWhereUniqueInput | ProgressionWhereUniqueInput[]
    connect?: ProgressionWhereUniqueInput | ProgressionWhereUniqueInput[]
    update?: ProgressionUpdateWithWhereUniqueWithoutWorkoutInput | ProgressionUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: ProgressionUpdateManyWithWhereWithoutWorkoutInput | ProgressionUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: ProgressionScalarWhereInput | ProgressionScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutWorkoutNestedInput = {
    create?: XOR<UserCreateWithoutWorkoutInput, UserUncheckedCreateWithoutWorkoutInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkoutInput
    upsert?: UserUpsertWithoutWorkoutInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkoutInput, UserUpdateWithoutWorkoutInput>, UserUncheckedUpdateWithoutWorkoutInput>
  }

  export type DifficultyUpdateOneRequiredWithoutWorkoutsNestedInput = {
    create?: XOR<DifficultyCreateWithoutWorkoutsInput, DifficultyUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: DifficultyCreateOrConnectWithoutWorkoutsInput
    upsert?: DifficultyUpsertWithoutWorkoutsInput
    connect?: DifficultyWhereUniqueInput
    update?: XOR<XOR<DifficultyUpdateToOneWithWhereWithoutWorkoutsInput, DifficultyUpdateWithoutWorkoutsInput>, DifficultyUncheckedUpdateWithoutWorkoutsInput>
  }

  export type MuscleUncheckedUpdateManyWithoutWorkoutsNestedInput = {
    create?: XOR<MuscleCreateWithoutWorkoutsInput, MuscleUncheckedCreateWithoutWorkoutsInput> | MuscleCreateWithoutWorkoutsInput[] | MuscleUncheckedCreateWithoutWorkoutsInput[]
    connectOrCreate?: MuscleCreateOrConnectWithoutWorkoutsInput | MuscleCreateOrConnectWithoutWorkoutsInput[]
    upsert?: MuscleUpsertWithWhereUniqueWithoutWorkoutsInput | MuscleUpsertWithWhereUniqueWithoutWorkoutsInput[]
    set?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    disconnect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    delete?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    connect?: MuscleWhereUniqueInput | MuscleWhereUniqueInput[]
    update?: MuscleUpdateWithWhereUniqueWithoutWorkoutsInput | MuscleUpdateWithWhereUniqueWithoutWorkoutsInput[]
    updateMany?: MuscleUpdateManyWithWhereWithoutWorkoutsInput | MuscleUpdateManyWithWhereWithoutWorkoutsInput[]
    deleteMany?: MuscleScalarWhereInput | MuscleScalarWhereInput[]
  }

  export type ProgressionUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<ProgressionCreateWithoutWorkoutInput, ProgressionUncheckedCreateWithoutWorkoutInput> | ProgressionCreateWithoutWorkoutInput[] | ProgressionUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: ProgressionCreateOrConnectWithoutWorkoutInput | ProgressionCreateOrConnectWithoutWorkoutInput[]
    upsert?: ProgressionUpsertWithWhereUniqueWithoutWorkoutInput | ProgressionUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: ProgressionCreateManyWorkoutInputEnvelope
    set?: ProgressionWhereUniqueInput | ProgressionWhereUniqueInput[]
    disconnect?: ProgressionWhereUniqueInput | ProgressionWhereUniqueInput[]
    delete?: ProgressionWhereUniqueInput | ProgressionWhereUniqueInput[]
    connect?: ProgressionWhereUniqueInput | ProgressionWhereUniqueInput[]
    update?: ProgressionUpdateWithWhereUniqueWithoutWorkoutInput | ProgressionUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: ProgressionUpdateManyWithWhereWithoutWorkoutInput | ProgressionUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: ProgressionScalarWhereInput | ProgressionScalarWhereInput[]
  }

  export type WorkoutCreateNestedOneWithoutProgressionsInput = {
    create?: XOR<WorkoutCreateWithoutProgressionsInput, WorkoutUncheckedCreateWithoutProgressionsInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutProgressionsInput
    connect?: WorkoutWhereUniqueInput
  }

  export type ActicityCreateNestedManyWithoutProgressionInput = {
    create?: XOR<ActicityCreateWithoutProgressionInput, ActicityUncheckedCreateWithoutProgressionInput> | ActicityCreateWithoutProgressionInput[] | ActicityUncheckedCreateWithoutProgressionInput[]
    connectOrCreate?: ActicityCreateOrConnectWithoutProgressionInput | ActicityCreateOrConnectWithoutProgressionInput[]
    createMany?: ActicityCreateManyProgressionInputEnvelope
    connect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
  }

  export type ActicityUncheckedCreateNestedManyWithoutProgressionInput = {
    create?: XOR<ActicityCreateWithoutProgressionInput, ActicityUncheckedCreateWithoutProgressionInput> | ActicityCreateWithoutProgressionInput[] | ActicityUncheckedCreateWithoutProgressionInput[]
    connectOrCreate?: ActicityCreateOrConnectWithoutProgressionInput | ActicityCreateOrConnectWithoutProgressionInput[]
    createMany?: ActicityCreateManyProgressionInputEnvelope
    connect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WorkoutUpdateOneRequiredWithoutProgressionsNestedInput = {
    create?: XOR<WorkoutCreateWithoutProgressionsInput, WorkoutUncheckedCreateWithoutProgressionsInput>
    connectOrCreate?: WorkoutCreateOrConnectWithoutProgressionsInput
    upsert?: WorkoutUpsertWithoutProgressionsInput
    connect?: WorkoutWhereUniqueInput
    update?: XOR<XOR<WorkoutUpdateToOneWithWhereWithoutProgressionsInput, WorkoutUpdateWithoutProgressionsInput>, WorkoutUncheckedUpdateWithoutProgressionsInput>
  }

  export type ActicityUpdateManyWithoutProgressionNestedInput = {
    create?: XOR<ActicityCreateWithoutProgressionInput, ActicityUncheckedCreateWithoutProgressionInput> | ActicityCreateWithoutProgressionInput[] | ActicityUncheckedCreateWithoutProgressionInput[]
    connectOrCreate?: ActicityCreateOrConnectWithoutProgressionInput | ActicityCreateOrConnectWithoutProgressionInput[]
    upsert?: ActicityUpsertWithWhereUniqueWithoutProgressionInput | ActicityUpsertWithWhereUniqueWithoutProgressionInput[]
    createMany?: ActicityCreateManyProgressionInputEnvelope
    set?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    disconnect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    delete?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    connect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    update?: ActicityUpdateWithWhereUniqueWithoutProgressionInput | ActicityUpdateWithWhereUniqueWithoutProgressionInput[]
    updateMany?: ActicityUpdateManyWithWhereWithoutProgressionInput | ActicityUpdateManyWithWhereWithoutProgressionInput[]
    deleteMany?: ActicityScalarWhereInput | ActicityScalarWhereInput[]
  }

  export type ActicityUncheckedUpdateManyWithoutProgressionNestedInput = {
    create?: XOR<ActicityCreateWithoutProgressionInput, ActicityUncheckedCreateWithoutProgressionInput> | ActicityCreateWithoutProgressionInput[] | ActicityUncheckedCreateWithoutProgressionInput[]
    connectOrCreate?: ActicityCreateOrConnectWithoutProgressionInput | ActicityCreateOrConnectWithoutProgressionInput[]
    upsert?: ActicityUpsertWithWhereUniqueWithoutProgressionInput | ActicityUpsertWithWhereUniqueWithoutProgressionInput[]
    createMany?: ActicityCreateManyProgressionInputEnvelope
    set?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    disconnect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    delete?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    connect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    update?: ActicityUpdateWithWhereUniqueWithoutProgressionInput | ActicityUpdateWithWhereUniqueWithoutProgressionInput[]
    updateMany?: ActicityUpdateManyWithWhereWithoutProgressionInput | ActicityUpdateManyWithWhereWithoutProgressionInput[]
    deleteMany?: ActicityScalarWhereInput | ActicityScalarWhereInput[]
  }

  export type ProgressionCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<ProgressionCreateWithoutActivitiesInput, ProgressionUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ProgressionCreateOrConnectWithoutActivitiesInput
    connect?: ProgressionWhereUniqueInput
  }

  export type ExerciseCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<ExerciseCreateWithoutActivitiesInput, ExerciseUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutActivitiesInput
    connect?: ExerciseWhereUniqueInput
  }

  export type ImproveCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<ImproveCreateWithoutActivitiesInput, ImproveUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ImproveCreateOrConnectWithoutActivitiesInput
    connect?: ImproveWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProgressionUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<ProgressionCreateWithoutActivitiesInput, ProgressionUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ProgressionCreateOrConnectWithoutActivitiesInput
    upsert?: ProgressionUpsertWithoutActivitiesInput
    connect?: ProgressionWhereUniqueInput
    update?: XOR<XOR<ProgressionUpdateToOneWithWhereWithoutActivitiesInput, ProgressionUpdateWithoutActivitiesInput>, ProgressionUncheckedUpdateWithoutActivitiesInput>
  }

  export type ExerciseUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<ExerciseCreateWithoutActivitiesInput, ExerciseUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutActivitiesInput
    upsert?: ExerciseUpsertWithoutActivitiesInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutActivitiesInput, ExerciseUpdateWithoutActivitiesInput>, ExerciseUncheckedUpdateWithoutActivitiesInput>
  }

  export type ImproveUpdateOneWithoutActivitiesNestedInput = {
    create?: XOR<ImproveCreateWithoutActivitiesInput, ImproveUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ImproveCreateOrConnectWithoutActivitiesInput
    upsert?: ImproveUpsertWithoutActivitiesInput
    disconnect?: ImproveWhereInput | boolean
    delete?: ImproveWhereInput | boolean
    connect?: ImproveWhereUniqueInput
    update?: XOR<XOR<ImproveUpdateToOneWithWhereWithoutActivitiesInput, ImproveUpdateWithoutActivitiesInput>, ImproveUncheckedUpdateWithoutActivitiesInput>
  }

  export type ExerciseCreateNestedManyWithoutMusclesInput = {
    create?: XOR<ExerciseCreateWithoutMusclesInput, ExerciseUncheckedCreateWithoutMusclesInput> | ExerciseCreateWithoutMusclesInput[] | ExerciseUncheckedCreateWithoutMusclesInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutMusclesInput | ExerciseCreateOrConnectWithoutMusclesInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type WorkoutCreateNestedManyWithoutMusclesInput = {
    create?: XOR<WorkoutCreateWithoutMusclesInput, WorkoutUncheckedCreateWithoutMusclesInput> | WorkoutCreateWithoutMusclesInput[] | WorkoutUncheckedCreateWithoutMusclesInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutMusclesInput | WorkoutCreateOrConnectWithoutMusclesInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutMusclesInput = {
    create?: XOR<ExerciseCreateWithoutMusclesInput, ExerciseUncheckedCreateWithoutMusclesInput> | ExerciseCreateWithoutMusclesInput[] | ExerciseUncheckedCreateWithoutMusclesInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutMusclesInput | ExerciseCreateOrConnectWithoutMusclesInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type WorkoutUncheckedCreateNestedManyWithoutMusclesInput = {
    create?: XOR<WorkoutCreateWithoutMusclesInput, WorkoutUncheckedCreateWithoutMusclesInput> | WorkoutCreateWithoutMusclesInput[] | WorkoutUncheckedCreateWithoutMusclesInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutMusclesInput | WorkoutCreateOrConnectWithoutMusclesInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
  }

  export type ExerciseUpdateManyWithoutMusclesNestedInput = {
    create?: XOR<ExerciseCreateWithoutMusclesInput, ExerciseUncheckedCreateWithoutMusclesInput> | ExerciseCreateWithoutMusclesInput[] | ExerciseUncheckedCreateWithoutMusclesInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutMusclesInput | ExerciseCreateOrConnectWithoutMusclesInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutMusclesInput | ExerciseUpsertWithWhereUniqueWithoutMusclesInput[]
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutMusclesInput | ExerciseUpdateWithWhereUniqueWithoutMusclesInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutMusclesInput | ExerciseUpdateManyWithWhereWithoutMusclesInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type WorkoutUpdateManyWithoutMusclesNestedInput = {
    create?: XOR<WorkoutCreateWithoutMusclesInput, WorkoutUncheckedCreateWithoutMusclesInput> | WorkoutCreateWithoutMusclesInput[] | WorkoutUncheckedCreateWithoutMusclesInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutMusclesInput | WorkoutCreateOrConnectWithoutMusclesInput[]
    upsert?: WorkoutUpsertWithWhereUniqueWithoutMusclesInput | WorkoutUpsertWithWhereUniqueWithoutMusclesInput[]
    set?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    disconnect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    delete?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    update?: WorkoutUpdateWithWhereUniqueWithoutMusclesInput | WorkoutUpdateWithWhereUniqueWithoutMusclesInput[]
    updateMany?: WorkoutUpdateManyWithWhereWithoutMusclesInput | WorkoutUpdateManyWithWhereWithoutMusclesInput[]
    deleteMany?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutMusclesNestedInput = {
    create?: XOR<ExerciseCreateWithoutMusclesInput, ExerciseUncheckedCreateWithoutMusclesInput> | ExerciseCreateWithoutMusclesInput[] | ExerciseUncheckedCreateWithoutMusclesInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutMusclesInput | ExerciseCreateOrConnectWithoutMusclesInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutMusclesInput | ExerciseUpsertWithWhereUniqueWithoutMusclesInput[]
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutMusclesInput | ExerciseUpdateWithWhereUniqueWithoutMusclesInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutMusclesInput | ExerciseUpdateManyWithWhereWithoutMusclesInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type WorkoutUncheckedUpdateManyWithoutMusclesNestedInput = {
    create?: XOR<WorkoutCreateWithoutMusclesInput, WorkoutUncheckedCreateWithoutMusclesInput> | WorkoutCreateWithoutMusclesInput[] | WorkoutUncheckedCreateWithoutMusclesInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutMusclesInput | WorkoutCreateOrConnectWithoutMusclesInput[]
    upsert?: WorkoutUpsertWithWhereUniqueWithoutMusclesInput | WorkoutUpsertWithWhereUniqueWithoutMusclesInput[]
    set?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    disconnect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    delete?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    update?: WorkoutUpdateWithWhereUniqueWithoutMusclesInput | WorkoutUpdateWithWhereUniqueWithoutMusclesInput[]
    updateMany?: WorkoutUpdateManyWithWhereWithoutMusclesInput | WorkoutUpdateManyWithWhereWithoutMusclesInput[]
    deleteMany?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
  }

  export type ExerciseCreateNestedManyWithoutDifficultyInput = {
    create?: XOR<ExerciseCreateWithoutDifficultyInput, ExerciseUncheckedCreateWithoutDifficultyInput> | ExerciseCreateWithoutDifficultyInput[] | ExerciseUncheckedCreateWithoutDifficultyInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutDifficultyInput | ExerciseCreateOrConnectWithoutDifficultyInput[]
    createMany?: ExerciseCreateManyDifficultyInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type WorkoutCreateNestedManyWithoutDifficultyInput = {
    create?: XOR<WorkoutCreateWithoutDifficultyInput, WorkoutUncheckedCreateWithoutDifficultyInput> | WorkoutCreateWithoutDifficultyInput[] | WorkoutUncheckedCreateWithoutDifficultyInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutDifficultyInput | WorkoutCreateOrConnectWithoutDifficultyInput[]
    createMany?: WorkoutCreateManyDifficultyInputEnvelope
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutDifficultyInput = {
    create?: XOR<ExerciseCreateWithoutDifficultyInput, ExerciseUncheckedCreateWithoutDifficultyInput> | ExerciseCreateWithoutDifficultyInput[] | ExerciseUncheckedCreateWithoutDifficultyInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutDifficultyInput | ExerciseCreateOrConnectWithoutDifficultyInput[]
    createMany?: ExerciseCreateManyDifficultyInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type WorkoutUncheckedCreateNestedManyWithoutDifficultyInput = {
    create?: XOR<WorkoutCreateWithoutDifficultyInput, WorkoutUncheckedCreateWithoutDifficultyInput> | WorkoutCreateWithoutDifficultyInput[] | WorkoutUncheckedCreateWithoutDifficultyInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutDifficultyInput | WorkoutCreateOrConnectWithoutDifficultyInput[]
    createMany?: WorkoutCreateManyDifficultyInputEnvelope
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
  }

  export type ExerciseUpdateManyWithoutDifficultyNestedInput = {
    create?: XOR<ExerciseCreateWithoutDifficultyInput, ExerciseUncheckedCreateWithoutDifficultyInput> | ExerciseCreateWithoutDifficultyInput[] | ExerciseUncheckedCreateWithoutDifficultyInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutDifficultyInput | ExerciseCreateOrConnectWithoutDifficultyInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutDifficultyInput | ExerciseUpsertWithWhereUniqueWithoutDifficultyInput[]
    createMany?: ExerciseCreateManyDifficultyInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutDifficultyInput | ExerciseUpdateWithWhereUniqueWithoutDifficultyInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutDifficultyInput | ExerciseUpdateManyWithWhereWithoutDifficultyInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type WorkoutUpdateManyWithoutDifficultyNestedInput = {
    create?: XOR<WorkoutCreateWithoutDifficultyInput, WorkoutUncheckedCreateWithoutDifficultyInput> | WorkoutCreateWithoutDifficultyInput[] | WorkoutUncheckedCreateWithoutDifficultyInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutDifficultyInput | WorkoutCreateOrConnectWithoutDifficultyInput[]
    upsert?: WorkoutUpsertWithWhereUniqueWithoutDifficultyInput | WorkoutUpsertWithWhereUniqueWithoutDifficultyInput[]
    createMany?: WorkoutCreateManyDifficultyInputEnvelope
    set?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    disconnect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    delete?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    update?: WorkoutUpdateWithWhereUniqueWithoutDifficultyInput | WorkoutUpdateWithWhereUniqueWithoutDifficultyInput[]
    updateMany?: WorkoutUpdateManyWithWhereWithoutDifficultyInput | WorkoutUpdateManyWithWhereWithoutDifficultyInput[]
    deleteMany?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutDifficultyNestedInput = {
    create?: XOR<ExerciseCreateWithoutDifficultyInput, ExerciseUncheckedCreateWithoutDifficultyInput> | ExerciseCreateWithoutDifficultyInput[] | ExerciseUncheckedCreateWithoutDifficultyInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutDifficultyInput | ExerciseCreateOrConnectWithoutDifficultyInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutDifficultyInput | ExerciseUpsertWithWhereUniqueWithoutDifficultyInput[]
    createMany?: ExerciseCreateManyDifficultyInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutDifficultyInput | ExerciseUpdateWithWhereUniqueWithoutDifficultyInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutDifficultyInput | ExerciseUpdateManyWithWhereWithoutDifficultyInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type WorkoutUncheckedUpdateManyWithoutDifficultyNestedInput = {
    create?: XOR<WorkoutCreateWithoutDifficultyInput, WorkoutUncheckedCreateWithoutDifficultyInput> | WorkoutCreateWithoutDifficultyInput[] | WorkoutUncheckedCreateWithoutDifficultyInput[]
    connectOrCreate?: WorkoutCreateOrConnectWithoutDifficultyInput | WorkoutCreateOrConnectWithoutDifficultyInput[]
    upsert?: WorkoutUpsertWithWhereUniqueWithoutDifficultyInput | WorkoutUpsertWithWhereUniqueWithoutDifficultyInput[]
    createMany?: WorkoutCreateManyDifficultyInputEnvelope
    set?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    disconnect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    delete?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    connect?: WorkoutWhereUniqueInput | WorkoutWhereUniqueInput[]
    update?: WorkoutUpdateWithWhereUniqueWithoutDifficultyInput | WorkoutUpdateWithWhereUniqueWithoutDifficultyInput[]
    updateMany?: WorkoutUpdateManyWithWhereWithoutDifficultyInput | WorkoutUpdateManyWithWhereWithoutDifficultyInput[]
    deleteMany?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
  }

  export type ActicityCreateNestedManyWithoutImproveInput = {
    create?: XOR<ActicityCreateWithoutImproveInput, ActicityUncheckedCreateWithoutImproveInput> | ActicityCreateWithoutImproveInput[] | ActicityUncheckedCreateWithoutImproveInput[]
    connectOrCreate?: ActicityCreateOrConnectWithoutImproveInput | ActicityCreateOrConnectWithoutImproveInput[]
    createMany?: ActicityCreateManyImproveInputEnvelope
    connect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
  }

  export type ActicityUncheckedCreateNestedManyWithoutImproveInput = {
    create?: XOR<ActicityCreateWithoutImproveInput, ActicityUncheckedCreateWithoutImproveInput> | ActicityCreateWithoutImproveInput[] | ActicityUncheckedCreateWithoutImproveInput[]
    connectOrCreate?: ActicityCreateOrConnectWithoutImproveInput | ActicityCreateOrConnectWithoutImproveInput[]
    createMany?: ActicityCreateManyImproveInputEnvelope
    connect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
  }

  export type ActicityUpdateManyWithoutImproveNestedInput = {
    create?: XOR<ActicityCreateWithoutImproveInput, ActicityUncheckedCreateWithoutImproveInput> | ActicityCreateWithoutImproveInput[] | ActicityUncheckedCreateWithoutImproveInput[]
    connectOrCreate?: ActicityCreateOrConnectWithoutImproveInput | ActicityCreateOrConnectWithoutImproveInput[]
    upsert?: ActicityUpsertWithWhereUniqueWithoutImproveInput | ActicityUpsertWithWhereUniqueWithoutImproveInput[]
    createMany?: ActicityCreateManyImproveInputEnvelope
    set?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    disconnect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    delete?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    connect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    update?: ActicityUpdateWithWhereUniqueWithoutImproveInput | ActicityUpdateWithWhereUniqueWithoutImproveInput[]
    updateMany?: ActicityUpdateManyWithWhereWithoutImproveInput | ActicityUpdateManyWithWhereWithoutImproveInput[]
    deleteMany?: ActicityScalarWhereInput | ActicityScalarWhereInput[]
  }

  export type ActicityUncheckedUpdateManyWithoutImproveNestedInput = {
    create?: XOR<ActicityCreateWithoutImproveInput, ActicityUncheckedCreateWithoutImproveInput> | ActicityCreateWithoutImproveInput[] | ActicityUncheckedCreateWithoutImproveInput[]
    connectOrCreate?: ActicityCreateOrConnectWithoutImproveInput | ActicityCreateOrConnectWithoutImproveInput[]
    upsert?: ActicityUpsertWithWhereUniqueWithoutImproveInput | ActicityUpsertWithWhereUniqueWithoutImproveInput[]
    createMany?: ActicityCreateManyImproveInputEnvelope
    set?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    disconnect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    delete?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    connect?: ActicityWhereUniqueInput | ActicityWhereUniqueInput[]
    update?: ActicityUpdateWithWhereUniqueWithoutImproveInput | ActicityUpdateWithWhereUniqueWithoutImproveInput[]
    updateMany?: ActicityUpdateManyWithWhereWithoutImproveInput | ActicityUpdateManyWithWhereWithoutImproveInput[]
    deleteMany?: ActicityScalarWhereInput | ActicityScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ExerciseCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    muscles?: MuscleCreateNestedManyWithoutExercisesInput
    activities?: ActicityCreateNestedManyWithoutExerciseInput
    difficulty: DifficultyCreateNestedOneWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    difficultyId: string
    muscles?: MuscleUncheckedCreateNestedManyWithoutExercisesInput
    activities?: ActicityUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutUserInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutUserInput, ExerciseUncheckedCreateWithoutUserInput>
  }

  export type ExerciseCreateManyUserInputEnvelope = {
    data: ExerciseCreateManyUserInput | ExerciseCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    muscles?: MuscleCreateNestedManyWithoutWorkoutsInput
    progressions?: ProgressionCreateNestedManyWithoutWorkoutInput
    difficulty: DifficultyCreateNestedOneWithoutWorkoutsInput
  }

  export type WorkoutUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    difficultyId: string
    muscles?: MuscleUncheckedCreateNestedManyWithoutWorkoutsInput
    progressions?: ProgressionUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutUserInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutUserInput, WorkoutUncheckedCreateWithoutUserInput>
  }

  export type WorkoutCreateManyUserInputEnvelope = {
    data: WorkoutCreateManyUserInput | WorkoutCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseUpsertWithWhereUniqueWithoutUserInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutUserInput, ExerciseUncheckedUpdateWithoutUserInput>
    create: XOR<ExerciseCreateWithoutUserInput, ExerciseUncheckedCreateWithoutUserInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutUserInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutUserInput, ExerciseUncheckedUpdateWithoutUserInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutUserInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutUserInput>
  }

  export type ExerciseScalarWhereInput = {
    AND?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    OR?: ExerciseScalarWhereInput[]
    NOT?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    id?: StringFilter<"Exercise"> | string
    name?: StringFilter<"Exercise"> | string
    description?: StringNullableFilter<"Exercise"> | string | null
    userId?: StringFilter<"Exercise"> | string
    difficultyId?: StringFilter<"Exercise"> | string
  }

  export type WorkoutUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkoutWhereUniqueInput
    update: XOR<WorkoutUpdateWithoutUserInput, WorkoutUncheckedUpdateWithoutUserInput>
    create: XOR<WorkoutCreateWithoutUserInput, WorkoutUncheckedCreateWithoutUserInput>
  }

  export type WorkoutUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkoutWhereUniqueInput
    data: XOR<WorkoutUpdateWithoutUserInput, WorkoutUncheckedUpdateWithoutUserInput>
  }

  export type WorkoutUpdateManyWithWhereWithoutUserInput = {
    where: WorkoutScalarWhereInput
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkoutScalarWhereInput = {
    AND?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
    OR?: WorkoutScalarWhereInput[]
    NOT?: WorkoutScalarWhereInput | WorkoutScalarWhereInput[]
    id?: StringFilter<"Workout"> | string
    name?: StringFilter<"Workout"> | string
    description?: StringNullableFilter<"Workout"> | string | null
    userId?: StringFilter<"Workout"> | string
    difficultyId?: StringFilter<"Workout"> | string
  }

  export type MuscleCreateWithoutExercisesInput = {
    id?: string
    name: string
    value: string
    workouts?: WorkoutCreateNestedManyWithoutMusclesInput
  }

  export type MuscleUncheckedCreateWithoutExercisesInput = {
    id?: string
    name: string
    value: string
    workouts?: WorkoutUncheckedCreateNestedManyWithoutMusclesInput
  }

  export type MuscleCreateOrConnectWithoutExercisesInput = {
    where: MuscleWhereUniqueInput
    create: XOR<MuscleCreateWithoutExercisesInput, MuscleUncheckedCreateWithoutExercisesInput>
  }

  export type ActicityCreateWithoutExerciseInput = {
    id?: string
    order: number
    sets: number
    reps: number
    progression: ProgressionCreateNestedOneWithoutActivitiesInput
    improve?: ImproveCreateNestedOneWithoutActivitiesInput
  }

  export type ActicityUncheckedCreateWithoutExerciseInput = {
    id?: string
    order: number
    sets: number
    reps: number
    progressionId: string
    improveId?: string | null
  }

  export type ActicityCreateOrConnectWithoutExerciseInput = {
    where: ActicityWhereUniqueInput
    create: XOR<ActicityCreateWithoutExerciseInput, ActicityUncheckedCreateWithoutExerciseInput>
  }

  export type ActicityCreateManyExerciseInputEnvelope = {
    data: ActicityCreateManyExerciseInput | ActicityCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutExercisesInput = {
    id?: string
    name: string
    surname: string
    email: string
    passwordHash: string
    workout?: WorkoutCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutExercisesInput = {
    id?: string
    name: string
    surname: string
    email: string
    passwordHash: string
    workout?: WorkoutUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutExercisesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExercisesInput, UserUncheckedCreateWithoutExercisesInput>
  }

  export type DifficultyCreateWithoutExercisesInput = {
    id?: string
    name: string
    value: string
    level: number
    workouts?: WorkoutCreateNestedManyWithoutDifficultyInput
  }

  export type DifficultyUncheckedCreateWithoutExercisesInput = {
    id?: string
    name: string
    value: string
    level: number
    workouts?: WorkoutUncheckedCreateNestedManyWithoutDifficultyInput
  }

  export type DifficultyCreateOrConnectWithoutExercisesInput = {
    where: DifficultyWhereUniqueInput
    create: XOR<DifficultyCreateWithoutExercisesInput, DifficultyUncheckedCreateWithoutExercisesInput>
  }

  export type MuscleUpsertWithWhereUniqueWithoutExercisesInput = {
    where: MuscleWhereUniqueInput
    update: XOR<MuscleUpdateWithoutExercisesInput, MuscleUncheckedUpdateWithoutExercisesInput>
    create: XOR<MuscleCreateWithoutExercisesInput, MuscleUncheckedCreateWithoutExercisesInput>
  }

  export type MuscleUpdateWithWhereUniqueWithoutExercisesInput = {
    where: MuscleWhereUniqueInput
    data: XOR<MuscleUpdateWithoutExercisesInput, MuscleUncheckedUpdateWithoutExercisesInput>
  }

  export type MuscleUpdateManyWithWhereWithoutExercisesInput = {
    where: MuscleScalarWhereInput
    data: XOR<MuscleUpdateManyMutationInput, MuscleUncheckedUpdateManyWithoutExercisesInput>
  }

  export type MuscleScalarWhereInput = {
    AND?: MuscleScalarWhereInput | MuscleScalarWhereInput[]
    OR?: MuscleScalarWhereInput[]
    NOT?: MuscleScalarWhereInput | MuscleScalarWhereInput[]
    id?: StringFilter<"Muscle"> | string
    name?: StringFilter<"Muscle"> | string
    value?: StringFilter<"Muscle"> | string
  }

  export type ActicityUpsertWithWhereUniqueWithoutExerciseInput = {
    where: ActicityWhereUniqueInput
    update: XOR<ActicityUpdateWithoutExerciseInput, ActicityUncheckedUpdateWithoutExerciseInput>
    create: XOR<ActicityCreateWithoutExerciseInput, ActicityUncheckedCreateWithoutExerciseInput>
  }

  export type ActicityUpdateWithWhereUniqueWithoutExerciseInput = {
    where: ActicityWhereUniqueInput
    data: XOR<ActicityUpdateWithoutExerciseInput, ActicityUncheckedUpdateWithoutExerciseInput>
  }

  export type ActicityUpdateManyWithWhereWithoutExerciseInput = {
    where: ActicityScalarWhereInput
    data: XOR<ActicityUpdateManyMutationInput, ActicityUncheckedUpdateManyWithoutExerciseInput>
  }

  export type ActicityScalarWhereInput = {
    AND?: ActicityScalarWhereInput | ActicityScalarWhereInput[]
    OR?: ActicityScalarWhereInput[]
    NOT?: ActicityScalarWhereInput | ActicityScalarWhereInput[]
    id?: StringFilter<"Acticity"> | string
    order?: IntFilter<"Acticity"> | number
    sets?: IntFilter<"Acticity"> | number
    reps?: IntFilter<"Acticity"> | number
    progressionId?: StringFilter<"Acticity"> | string
    exerciseId?: StringFilter<"Acticity"> | string
    improveId?: StringNullableFilter<"Acticity"> | string | null
  }

  export type UserUpsertWithoutExercisesInput = {
    update: XOR<UserUpdateWithoutExercisesInput, UserUncheckedUpdateWithoutExercisesInput>
    create: XOR<UserCreateWithoutExercisesInput, UserUncheckedCreateWithoutExercisesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutExercisesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutExercisesInput, UserUncheckedUpdateWithoutExercisesInput>
  }

  export type UserUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    workout?: WorkoutUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    workout?: WorkoutUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DifficultyUpsertWithoutExercisesInput = {
    update: XOR<DifficultyUpdateWithoutExercisesInput, DifficultyUncheckedUpdateWithoutExercisesInput>
    create: XOR<DifficultyCreateWithoutExercisesInput, DifficultyUncheckedCreateWithoutExercisesInput>
    where?: DifficultyWhereInput
  }

  export type DifficultyUpdateToOneWithWhereWithoutExercisesInput = {
    where?: DifficultyWhereInput
    data: XOR<DifficultyUpdateWithoutExercisesInput, DifficultyUncheckedUpdateWithoutExercisesInput>
  }

  export type DifficultyUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    workouts?: WorkoutUpdateManyWithoutDifficultyNestedInput
  }

  export type DifficultyUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    workouts?: WorkoutUncheckedUpdateManyWithoutDifficultyNestedInput
  }

  export type MuscleCreateWithoutWorkoutsInput = {
    id?: string
    name: string
    value: string
    exercises?: ExerciseCreateNestedManyWithoutMusclesInput
  }

  export type MuscleUncheckedCreateWithoutWorkoutsInput = {
    id?: string
    name: string
    value: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutMusclesInput
  }

  export type MuscleCreateOrConnectWithoutWorkoutsInput = {
    where: MuscleWhereUniqueInput
    create: XOR<MuscleCreateWithoutWorkoutsInput, MuscleUncheckedCreateWithoutWorkoutsInput>
  }

  export type ProgressionCreateWithoutWorkoutInput = {
    id?: string
    createdAt?: Date | string
    activities?: ActicityCreateNestedManyWithoutProgressionInput
  }

  export type ProgressionUncheckedCreateWithoutWorkoutInput = {
    id?: string
    createdAt?: Date | string
    activities?: ActicityUncheckedCreateNestedManyWithoutProgressionInput
  }

  export type ProgressionCreateOrConnectWithoutWorkoutInput = {
    where: ProgressionWhereUniqueInput
    create: XOR<ProgressionCreateWithoutWorkoutInput, ProgressionUncheckedCreateWithoutWorkoutInput>
  }

  export type ProgressionCreateManyWorkoutInputEnvelope = {
    data: ProgressionCreateManyWorkoutInput | ProgressionCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutWorkoutInput = {
    id?: string
    name: string
    surname: string
    email: string
    passwordHash: string
    exercises?: ExerciseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkoutInput = {
    id?: string
    name: string
    surname: string
    email: string
    passwordHash: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkoutInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkoutInput, UserUncheckedCreateWithoutWorkoutInput>
  }

  export type DifficultyCreateWithoutWorkoutsInput = {
    id?: string
    name: string
    value: string
    level: number
    exercises?: ExerciseCreateNestedManyWithoutDifficultyInput
  }

  export type DifficultyUncheckedCreateWithoutWorkoutsInput = {
    id?: string
    name: string
    value: string
    level: number
    exercises?: ExerciseUncheckedCreateNestedManyWithoutDifficultyInput
  }

  export type DifficultyCreateOrConnectWithoutWorkoutsInput = {
    where: DifficultyWhereUniqueInput
    create: XOR<DifficultyCreateWithoutWorkoutsInput, DifficultyUncheckedCreateWithoutWorkoutsInput>
  }

  export type MuscleUpsertWithWhereUniqueWithoutWorkoutsInput = {
    where: MuscleWhereUniqueInput
    update: XOR<MuscleUpdateWithoutWorkoutsInput, MuscleUncheckedUpdateWithoutWorkoutsInput>
    create: XOR<MuscleCreateWithoutWorkoutsInput, MuscleUncheckedCreateWithoutWorkoutsInput>
  }

  export type MuscleUpdateWithWhereUniqueWithoutWorkoutsInput = {
    where: MuscleWhereUniqueInput
    data: XOR<MuscleUpdateWithoutWorkoutsInput, MuscleUncheckedUpdateWithoutWorkoutsInput>
  }

  export type MuscleUpdateManyWithWhereWithoutWorkoutsInput = {
    where: MuscleScalarWhereInput
    data: XOR<MuscleUpdateManyMutationInput, MuscleUncheckedUpdateManyWithoutWorkoutsInput>
  }

  export type ProgressionUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: ProgressionWhereUniqueInput
    update: XOR<ProgressionUpdateWithoutWorkoutInput, ProgressionUncheckedUpdateWithoutWorkoutInput>
    create: XOR<ProgressionCreateWithoutWorkoutInput, ProgressionUncheckedCreateWithoutWorkoutInput>
  }

  export type ProgressionUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: ProgressionWhereUniqueInput
    data: XOR<ProgressionUpdateWithoutWorkoutInput, ProgressionUncheckedUpdateWithoutWorkoutInput>
  }

  export type ProgressionUpdateManyWithWhereWithoutWorkoutInput = {
    where: ProgressionScalarWhereInput
    data: XOR<ProgressionUpdateManyMutationInput, ProgressionUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type ProgressionScalarWhereInput = {
    AND?: ProgressionScalarWhereInput | ProgressionScalarWhereInput[]
    OR?: ProgressionScalarWhereInput[]
    NOT?: ProgressionScalarWhereInput | ProgressionScalarWhereInput[]
    id?: StringFilter<"Progression"> | string
    workoutId?: StringFilter<"Progression"> | string
    createdAt?: DateTimeFilter<"Progression"> | Date | string
  }

  export type UserUpsertWithoutWorkoutInput = {
    update: XOR<UserUpdateWithoutWorkoutInput, UserUncheckedUpdateWithoutWorkoutInput>
    create: XOR<UserCreateWithoutWorkoutInput, UserUncheckedCreateWithoutWorkoutInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkoutInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkoutInput, UserUncheckedUpdateWithoutWorkoutInput>
  }

  export type UserUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DifficultyUpsertWithoutWorkoutsInput = {
    update: XOR<DifficultyUpdateWithoutWorkoutsInput, DifficultyUncheckedUpdateWithoutWorkoutsInput>
    create: XOR<DifficultyCreateWithoutWorkoutsInput, DifficultyUncheckedCreateWithoutWorkoutsInput>
    where?: DifficultyWhereInput
  }

  export type DifficultyUpdateToOneWithWhereWithoutWorkoutsInput = {
    where?: DifficultyWhereInput
    data: XOR<DifficultyUpdateWithoutWorkoutsInput, DifficultyUncheckedUpdateWithoutWorkoutsInput>
  }

  export type DifficultyUpdateWithoutWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    exercises?: ExerciseUpdateManyWithoutDifficultyNestedInput
  }

  export type DifficultyUncheckedUpdateWithoutWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    exercises?: ExerciseUncheckedUpdateManyWithoutDifficultyNestedInput
  }

  export type WorkoutCreateWithoutProgressionsInput = {
    id?: string
    name: string
    description?: string | null
    muscles?: MuscleCreateNestedManyWithoutWorkoutsInput
    user: UserCreateNestedOneWithoutWorkoutInput
    difficulty: DifficultyCreateNestedOneWithoutWorkoutsInput
  }

  export type WorkoutUncheckedCreateWithoutProgressionsInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    difficultyId: string
    muscles?: MuscleUncheckedCreateNestedManyWithoutWorkoutsInput
  }

  export type WorkoutCreateOrConnectWithoutProgressionsInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutProgressionsInput, WorkoutUncheckedCreateWithoutProgressionsInput>
  }

  export type ActicityCreateWithoutProgressionInput = {
    id?: string
    order: number
    sets: number
    reps: number
    exercise: ExerciseCreateNestedOneWithoutActivitiesInput
    improve?: ImproveCreateNestedOneWithoutActivitiesInput
  }

  export type ActicityUncheckedCreateWithoutProgressionInput = {
    id?: string
    order: number
    sets: number
    reps: number
    exerciseId: string
    improveId?: string | null
  }

  export type ActicityCreateOrConnectWithoutProgressionInput = {
    where: ActicityWhereUniqueInput
    create: XOR<ActicityCreateWithoutProgressionInput, ActicityUncheckedCreateWithoutProgressionInput>
  }

  export type ActicityCreateManyProgressionInputEnvelope = {
    data: ActicityCreateManyProgressionInput | ActicityCreateManyProgressionInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutUpsertWithoutProgressionsInput = {
    update: XOR<WorkoutUpdateWithoutProgressionsInput, WorkoutUncheckedUpdateWithoutProgressionsInput>
    create: XOR<WorkoutCreateWithoutProgressionsInput, WorkoutUncheckedCreateWithoutProgressionsInput>
    where?: WorkoutWhereInput
  }

  export type WorkoutUpdateToOneWithWhereWithoutProgressionsInput = {
    where?: WorkoutWhereInput
    data: XOR<WorkoutUpdateWithoutProgressionsInput, WorkoutUncheckedUpdateWithoutProgressionsInput>
  }

  export type WorkoutUpdateWithoutProgressionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: MuscleUpdateManyWithoutWorkoutsNestedInput
    user?: UserUpdateOneRequiredWithoutWorkoutNestedInput
    difficulty?: DifficultyUpdateOneRequiredWithoutWorkoutsNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutProgressionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    difficultyId?: StringFieldUpdateOperationsInput | string
    muscles?: MuscleUncheckedUpdateManyWithoutWorkoutsNestedInput
  }

  export type ActicityUpsertWithWhereUniqueWithoutProgressionInput = {
    where: ActicityWhereUniqueInput
    update: XOR<ActicityUpdateWithoutProgressionInput, ActicityUncheckedUpdateWithoutProgressionInput>
    create: XOR<ActicityCreateWithoutProgressionInput, ActicityUncheckedCreateWithoutProgressionInput>
  }

  export type ActicityUpdateWithWhereUniqueWithoutProgressionInput = {
    where: ActicityWhereUniqueInput
    data: XOR<ActicityUpdateWithoutProgressionInput, ActicityUncheckedUpdateWithoutProgressionInput>
  }

  export type ActicityUpdateManyWithWhereWithoutProgressionInput = {
    where: ActicityScalarWhereInput
    data: XOR<ActicityUpdateManyMutationInput, ActicityUncheckedUpdateManyWithoutProgressionInput>
  }

  export type ProgressionCreateWithoutActivitiesInput = {
    id?: string
    createdAt?: Date | string
    workout: WorkoutCreateNestedOneWithoutProgressionsInput
  }

  export type ProgressionUncheckedCreateWithoutActivitiesInput = {
    id?: string
    workoutId: string
    createdAt?: Date | string
  }

  export type ProgressionCreateOrConnectWithoutActivitiesInput = {
    where: ProgressionWhereUniqueInput
    create: XOR<ProgressionCreateWithoutActivitiesInput, ProgressionUncheckedCreateWithoutActivitiesInput>
  }

  export type ExerciseCreateWithoutActivitiesInput = {
    id?: string
    name: string
    description?: string | null
    muscles?: MuscleCreateNestedManyWithoutExercisesInput
    User: UserCreateNestedOneWithoutExercisesInput
    difficulty: DifficultyCreateNestedOneWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutActivitiesInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    difficultyId: string
    muscles?: MuscleUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseCreateOrConnectWithoutActivitiesInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutActivitiesInput, ExerciseUncheckedCreateWithoutActivitiesInput>
  }

  export type ImproveCreateWithoutActivitiesInput = {
    id?: string
    name: string
    value: string
  }

  export type ImproveUncheckedCreateWithoutActivitiesInput = {
    id?: string
    name: string
    value: string
  }

  export type ImproveCreateOrConnectWithoutActivitiesInput = {
    where: ImproveWhereUniqueInput
    create: XOR<ImproveCreateWithoutActivitiesInput, ImproveUncheckedCreateWithoutActivitiesInput>
  }

  export type ProgressionUpsertWithoutActivitiesInput = {
    update: XOR<ProgressionUpdateWithoutActivitiesInput, ProgressionUncheckedUpdateWithoutActivitiesInput>
    create: XOR<ProgressionCreateWithoutActivitiesInput, ProgressionUncheckedCreateWithoutActivitiesInput>
    where?: ProgressionWhereInput
  }

  export type ProgressionUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: ProgressionWhereInput
    data: XOR<ProgressionUpdateWithoutActivitiesInput, ProgressionUncheckedUpdateWithoutActivitiesInput>
  }

  export type ProgressionUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workout?: WorkoutUpdateOneRequiredWithoutProgressionsNestedInput
  }

  export type ProgressionUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    workoutId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExerciseUpsertWithoutActivitiesInput = {
    update: XOR<ExerciseUpdateWithoutActivitiesInput, ExerciseUncheckedUpdateWithoutActivitiesInput>
    create: XOR<ExerciseCreateWithoutActivitiesInput, ExerciseUncheckedCreateWithoutActivitiesInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutActivitiesInput, ExerciseUncheckedUpdateWithoutActivitiesInput>
  }

  export type ExerciseUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: MuscleUpdateManyWithoutExercisesNestedInput
    User?: UserUpdateOneRequiredWithoutExercisesNestedInput
    difficulty?: DifficultyUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    difficultyId?: StringFieldUpdateOperationsInput | string
    muscles?: MuscleUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type ImproveUpsertWithoutActivitiesInput = {
    update: XOR<ImproveUpdateWithoutActivitiesInput, ImproveUncheckedUpdateWithoutActivitiesInput>
    create: XOR<ImproveCreateWithoutActivitiesInput, ImproveUncheckedCreateWithoutActivitiesInput>
    where?: ImproveWhereInput
  }

  export type ImproveUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: ImproveWhereInput
    data: XOR<ImproveUpdateWithoutActivitiesInput, ImproveUncheckedUpdateWithoutActivitiesInput>
  }

  export type ImproveUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ImproveUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseCreateWithoutMusclesInput = {
    id?: string
    name: string
    description?: string | null
    activities?: ActicityCreateNestedManyWithoutExerciseInput
    User: UserCreateNestedOneWithoutExercisesInput
    difficulty: DifficultyCreateNestedOneWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutMusclesInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    difficultyId: string
    activities?: ActicityUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutMusclesInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutMusclesInput, ExerciseUncheckedCreateWithoutMusclesInput>
  }

  export type WorkoutCreateWithoutMusclesInput = {
    id?: string
    name: string
    description?: string | null
    progressions?: ProgressionCreateNestedManyWithoutWorkoutInput
    user: UserCreateNestedOneWithoutWorkoutInput
    difficulty: DifficultyCreateNestedOneWithoutWorkoutsInput
  }

  export type WorkoutUncheckedCreateWithoutMusclesInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    difficultyId: string
    progressions?: ProgressionUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutMusclesInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutMusclesInput, WorkoutUncheckedCreateWithoutMusclesInput>
  }

  export type ExerciseUpsertWithWhereUniqueWithoutMusclesInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutMusclesInput, ExerciseUncheckedUpdateWithoutMusclesInput>
    create: XOR<ExerciseCreateWithoutMusclesInput, ExerciseUncheckedCreateWithoutMusclesInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutMusclesInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutMusclesInput, ExerciseUncheckedUpdateWithoutMusclesInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutMusclesInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutMusclesInput>
  }

  export type WorkoutUpsertWithWhereUniqueWithoutMusclesInput = {
    where: WorkoutWhereUniqueInput
    update: XOR<WorkoutUpdateWithoutMusclesInput, WorkoutUncheckedUpdateWithoutMusclesInput>
    create: XOR<WorkoutCreateWithoutMusclesInput, WorkoutUncheckedCreateWithoutMusclesInput>
  }

  export type WorkoutUpdateWithWhereUniqueWithoutMusclesInput = {
    where: WorkoutWhereUniqueInput
    data: XOR<WorkoutUpdateWithoutMusclesInput, WorkoutUncheckedUpdateWithoutMusclesInput>
  }

  export type WorkoutUpdateManyWithWhereWithoutMusclesInput = {
    where: WorkoutScalarWhereInput
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyWithoutMusclesInput>
  }

  export type ExerciseCreateWithoutDifficultyInput = {
    id?: string
    name: string
    description?: string | null
    muscles?: MuscleCreateNestedManyWithoutExercisesInput
    activities?: ActicityCreateNestedManyWithoutExerciseInput
    User: UserCreateNestedOneWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutDifficultyInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    muscles?: MuscleUncheckedCreateNestedManyWithoutExercisesInput
    activities?: ActicityUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutDifficultyInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutDifficultyInput, ExerciseUncheckedCreateWithoutDifficultyInput>
  }

  export type ExerciseCreateManyDifficultyInputEnvelope = {
    data: ExerciseCreateManyDifficultyInput | ExerciseCreateManyDifficultyInput[]
    skipDuplicates?: boolean
  }

  export type WorkoutCreateWithoutDifficultyInput = {
    id?: string
    name: string
    description?: string | null
    muscles?: MuscleCreateNestedManyWithoutWorkoutsInput
    progressions?: ProgressionCreateNestedManyWithoutWorkoutInput
    user: UserCreateNestedOneWithoutWorkoutInput
  }

  export type WorkoutUncheckedCreateWithoutDifficultyInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    muscles?: MuscleUncheckedCreateNestedManyWithoutWorkoutsInput
    progressions?: ProgressionUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type WorkoutCreateOrConnectWithoutDifficultyInput = {
    where: WorkoutWhereUniqueInput
    create: XOR<WorkoutCreateWithoutDifficultyInput, WorkoutUncheckedCreateWithoutDifficultyInput>
  }

  export type WorkoutCreateManyDifficultyInputEnvelope = {
    data: WorkoutCreateManyDifficultyInput | WorkoutCreateManyDifficultyInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseUpsertWithWhereUniqueWithoutDifficultyInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutDifficultyInput, ExerciseUncheckedUpdateWithoutDifficultyInput>
    create: XOR<ExerciseCreateWithoutDifficultyInput, ExerciseUncheckedCreateWithoutDifficultyInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutDifficultyInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutDifficultyInput, ExerciseUncheckedUpdateWithoutDifficultyInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutDifficultyInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutDifficultyInput>
  }

  export type WorkoutUpsertWithWhereUniqueWithoutDifficultyInput = {
    where: WorkoutWhereUniqueInput
    update: XOR<WorkoutUpdateWithoutDifficultyInput, WorkoutUncheckedUpdateWithoutDifficultyInput>
    create: XOR<WorkoutCreateWithoutDifficultyInput, WorkoutUncheckedCreateWithoutDifficultyInput>
  }

  export type WorkoutUpdateWithWhereUniqueWithoutDifficultyInput = {
    where: WorkoutWhereUniqueInput
    data: XOR<WorkoutUpdateWithoutDifficultyInput, WorkoutUncheckedUpdateWithoutDifficultyInput>
  }

  export type WorkoutUpdateManyWithWhereWithoutDifficultyInput = {
    where: WorkoutScalarWhereInput
    data: XOR<WorkoutUpdateManyMutationInput, WorkoutUncheckedUpdateManyWithoutDifficultyInput>
  }

  export type ActicityCreateWithoutImproveInput = {
    id?: string
    order: number
    sets: number
    reps: number
    progression: ProgressionCreateNestedOneWithoutActivitiesInput
    exercise: ExerciseCreateNestedOneWithoutActivitiesInput
  }

  export type ActicityUncheckedCreateWithoutImproveInput = {
    id?: string
    order: number
    sets: number
    reps: number
    progressionId: string
    exerciseId: string
  }

  export type ActicityCreateOrConnectWithoutImproveInput = {
    where: ActicityWhereUniqueInput
    create: XOR<ActicityCreateWithoutImproveInput, ActicityUncheckedCreateWithoutImproveInput>
  }

  export type ActicityCreateManyImproveInputEnvelope = {
    data: ActicityCreateManyImproveInput | ActicityCreateManyImproveInput[]
    skipDuplicates?: boolean
  }

  export type ActicityUpsertWithWhereUniqueWithoutImproveInput = {
    where: ActicityWhereUniqueInput
    update: XOR<ActicityUpdateWithoutImproveInput, ActicityUncheckedUpdateWithoutImproveInput>
    create: XOR<ActicityCreateWithoutImproveInput, ActicityUncheckedCreateWithoutImproveInput>
  }

  export type ActicityUpdateWithWhereUniqueWithoutImproveInput = {
    where: ActicityWhereUniqueInput
    data: XOR<ActicityUpdateWithoutImproveInput, ActicityUncheckedUpdateWithoutImproveInput>
  }

  export type ActicityUpdateManyWithWhereWithoutImproveInput = {
    where: ActicityScalarWhereInput
    data: XOR<ActicityUpdateManyMutationInput, ActicityUncheckedUpdateManyWithoutImproveInput>
  }

  export type ExerciseCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    difficultyId: string
  }

  export type WorkoutCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    difficultyId: string
  }

  export type ExerciseUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: MuscleUpdateManyWithoutExercisesNestedInput
    activities?: ActicityUpdateManyWithoutExerciseNestedInput
    difficulty?: DifficultyUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    difficultyId?: StringFieldUpdateOperationsInput | string
    muscles?: MuscleUncheckedUpdateManyWithoutExercisesNestedInput
    activities?: ActicityUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    difficultyId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkoutUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: MuscleUpdateManyWithoutWorkoutsNestedInput
    progressions?: ProgressionUpdateManyWithoutWorkoutNestedInput
    difficulty?: DifficultyUpdateOneRequiredWithoutWorkoutsNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    difficultyId?: StringFieldUpdateOperationsInput | string
    muscles?: MuscleUncheckedUpdateManyWithoutWorkoutsNestedInput
    progressions?: ProgressionUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    difficultyId?: StringFieldUpdateOperationsInput | string
  }

  export type ActicityCreateManyExerciseInput = {
    id?: string
    order: number
    sets: number
    reps: number
    progressionId: string
    improveId?: string | null
  }

  export type MuscleUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    workouts?: WorkoutUpdateManyWithoutMusclesNestedInput
  }

  export type MuscleUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    workouts?: WorkoutUncheckedUpdateManyWithoutMusclesNestedInput
  }

  export type MuscleUncheckedUpdateManyWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ActicityUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    progression?: ProgressionUpdateOneRequiredWithoutActivitiesNestedInput
    improve?: ImproveUpdateOneWithoutActivitiesNestedInput
  }

  export type ActicityUncheckedUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    progressionId?: StringFieldUpdateOperationsInput | string
    improveId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActicityUncheckedUpdateManyWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    progressionId?: StringFieldUpdateOperationsInput | string
    improveId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProgressionCreateManyWorkoutInput = {
    id?: string
    createdAt?: Date | string
  }

  export type MuscleUpdateWithoutWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUpdateManyWithoutMusclesNestedInput
  }

  export type MuscleUncheckedUpdateWithoutWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutMusclesNestedInput
  }

  export type MuscleUncheckedUpdateManyWithoutWorkoutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ProgressionUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActicityUpdateManyWithoutProgressionNestedInput
  }

  export type ProgressionUncheckedUpdateWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActicityUncheckedUpdateManyWithoutProgressionNestedInput
  }

  export type ProgressionUncheckedUpdateManyWithoutWorkoutInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActicityCreateManyProgressionInput = {
    id?: string
    order: number
    sets: number
    reps: number
    exerciseId: string
    improveId?: string | null
  }

  export type ActicityUpdateWithoutProgressionInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    exercise?: ExerciseUpdateOneRequiredWithoutActivitiesNestedInput
    improve?: ImproveUpdateOneWithoutActivitiesNestedInput
  }

  export type ActicityUncheckedUpdateWithoutProgressionInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    exerciseId?: StringFieldUpdateOperationsInput | string
    improveId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActicityUncheckedUpdateManyWithoutProgressionInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    exerciseId?: StringFieldUpdateOperationsInput | string
    improveId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExerciseUpdateWithoutMusclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActicityUpdateManyWithoutExerciseNestedInput
    User?: UserUpdateOneRequiredWithoutExercisesNestedInput
    difficulty?: DifficultyUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutMusclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    difficultyId?: StringFieldUpdateOperationsInput | string
    activities?: ActicityUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutMusclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    difficultyId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkoutUpdateWithoutMusclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    progressions?: ProgressionUpdateManyWithoutWorkoutNestedInput
    user?: UserUpdateOneRequiredWithoutWorkoutNestedInput
    difficulty?: DifficultyUpdateOneRequiredWithoutWorkoutsNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutMusclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    difficultyId?: StringFieldUpdateOperationsInput | string
    progressions?: ProgressionUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateManyWithoutMusclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    difficultyId?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseCreateManyDifficultyInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
  }

  export type WorkoutCreateManyDifficultyInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
  }

  export type ExerciseUpdateWithoutDifficultyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: MuscleUpdateManyWithoutExercisesNestedInput
    activities?: ActicityUpdateManyWithoutExerciseNestedInput
    User?: UserUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutDifficultyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    muscles?: MuscleUncheckedUpdateManyWithoutExercisesNestedInput
    activities?: ActicityUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutDifficultyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkoutUpdateWithoutDifficultyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: MuscleUpdateManyWithoutWorkoutsNestedInput
    progressions?: ProgressionUpdateManyWithoutWorkoutNestedInput
    user?: UserUpdateOneRequiredWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateWithoutDifficultyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    muscles?: MuscleUncheckedUpdateManyWithoutWorkoutsNestedInput
    progressions?: ProgressionUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type WorkoutUncheckedUpdateManyWithoutDifficultyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ActicityCreateManyImproveInput = {
    id?: string
    order: number
    sets: number
    reps: number
    progressionId: string
    exerciseId: string
  }

  export type ActicityUpdateWithoutImproveInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    progression?: ProgressionUpdateOneRequiredWithoutActivitiesNestedInput
    exercise?: ExerciseUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type ActicityUncheckedUpdateWithoutImproveInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    progressionId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
  }

  export type ActicityUncheckedUpdateManyWithoutImproveInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    progressionId?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseCountOutputTypeDefaultArgs instead
     */
    export type ExerciseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExerciseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutCountOutputTypeDefaultArgs instead
     */
    export type WorkoutCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProgressionCountOutputTypeDefaultArgs instead
     */
    export type ProgressionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProgressionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MuscleCountOutputTypeDefaultArgs instead
     */
    export type MuscleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MuscleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DifficultyCountOutputTypeDefaultArgs instead
     */
    export type DifficultyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DifficultyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImproveCountOutputTypeDefaultArgs instead
     */
    export type ImproveCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ImproveCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseDefaultArgs instead
     */
    export type ExerciseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExerciseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkoutDefaultArgs instead
     */
    export type WorkoutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkoutDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProgressionDefaultArgs instead
     */
    export type ProgressionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProgressionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActicityDefaultArgs instead
     */
    export type ActicityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActicityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MuscleDefaultArgs instead
     */
    export type MuscleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MuscleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DifficultyDefaultArgs instead
     */
    export type DifficultyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DifficultyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImproveDefaultArgs instead
     */
    export type ImproveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ImproveDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}